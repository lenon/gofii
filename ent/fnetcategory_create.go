// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lenon/gofii/ent/fnetcategory"
	"github.com/lenon/gofii/ent/fnetdocument"
)

// FnetCategoryCreate is the builder for creating a FnetCategory entity.
type FnetCategoryCreate struct {
	config
	mutation *FnetCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (fcc *FnetCategoryCreate) SetName(s string) *FnetCategoryCreate {
	fcc.mutation.SetName(s)
	return fcc
}

// AddDocumentIDs adds the "documents" edge to the FnetDocument entity by IDs.
func (fcc *FnetCategoryCreate) AddDocumentIDs(ids ...int) *FnetCategoryCreate {
	fcc.mutation.AddDocumentIDs(ids...)
	return fcc
}

// AddDocuments adds the "documents" edges to the FnetDocument entity.
func (fcc *FnetCategoryCreate) AddDocuments(f ...*FnetDocument) *FnetCategoryCreate {
	ids := make([]int, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return fcc.AddDocumentIDs(ids...)
}

// Mutation returns the FnetCategoryMutation object of the builder.
func (fcc *FnetCategoryCreate) Mutation() *FnetCategoryMutation {
	return fcc.mutation
}

// Save creates the FnetCategory in the database.
func (fcc *FnetCategoryCreate) Save(ctx context.Context) (*FnetCategory, error) {
	var (
		err  error
		node *FnetCategory
	)
	if len(fcc.hooks) == 0 {
		if err = fcc.check(); err != nil {
			return nil, err
		}
		node, err = fcc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FnetCategoryMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fcc.check(); err != nil {
				return nil, err
			}
			fcc.mutation = mutation
			if node, err = fcc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fcc.hooks) - 1; i >= 0; i-- {
			if fcc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fcc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fcc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FnetCategory)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FnetCategoryMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fcc *FnetCategoryCreate) SaveX(ctx context.Context) *FnetCategory {
	v, err := fcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcc *FnetCategoryCreate) Exec(ctx context.Context) error {
	_, err := fcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcc *FnetCategoryCreate) ExecX(ctx context.Context) {
	if err := fcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fcc *FnetCategoryCreate) check() error {
	if _, ok := fcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "FnetCategory.name"`)}
	}
	return nil
}

func (fcc *FnetCategoryCreate) sqlSave(ctx context.Context) (*FnetCategory, error) {
	_node, _spec := fcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fcc *FnetCategoryCreate) createSpec() (*FnetCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &FnetCategory{config: fcc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fnetcategory.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fnetcategory.FieldID,
			},
		}
	)
	_spec.OnConflict = fcc.conflict
	if value, ok := fcc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetcategory.FieldName,
		})
		_node.Name = value
	}
	if nodes := fcc.mutation.DocumentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   fnetcategory.DocumentsTable,
			Columns: []string{fnetcategory.DocumentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: fnetdocument.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FnetCategory.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FnetCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fcc *FnetCategoryCreate) OnConflict(opts ...sql.ConflictOption) *FnetCategoryUpsertOne {
	fcc.conflict = opts
	return &FnetCategoryUpsertOne{
		create: fcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FnetCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fcc *FnetCategoryCreate) OnConflictColumns(columns ...string) *FnetCategoryUpsertOne {
	fcc.conflict = append(fcc.conflict, sql.ConflictColumns(columns...))
	return &FnetCategoryUpsertOne{
		create: fcc,
	}
}

type (
	// FnetCategoryUpsertOne is the builder for "upsert"-ing
	//  one FnetCategory node.
	FnetCategoryUpsertOne struct {
		create *FnetCategoryCreate
	}

	// FnetCategoryUpsert is the "OnConflict" setter.
	FnetCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *FnetCategoryUpsert) SetName(v string) *FnetCategoryUpsert {
	u.Set(fnetcategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FnetCategoryUpsert) UpdateName() *FnetCategoryUpsert {
	u.SetExcluded(fnetcategory.FieldName)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FnetCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FnetCategoryUpsertOne) UpdateNewValues() *FnetCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.Name(); exists {
			s.SetIgnore(fnetcategory.FieldName)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FnetCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FnetCategoryUpsertOne) Ignore() *FnetCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FnetCategoryUpsertOne) DoNothing() *FnetCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FnetCategoryCreate.OnConflict
// documentation for more info.
func (u *FnetCategoryUpsertOne) Update(set func(*FnetCategoryUpsert)) *FnetCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FnetCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FnetCategoryUpsertOne) SetName(v string) *FnetCategoryUpsertOne {
	return u.Update(func(s *FnetCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FnetCategoryUpsertOne) UpdateName() *FnetCategoryUpsertOne {
	return u.Update(func(s *FnetCategoryUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *FnetCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FnetCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FnetCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FnetCategoryUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FnetCategoryUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FnetCategoryCreateBulk is the builder for creating many FnetCategory entities in bulk.
type FnetCategoryCreateBulk struct {
	config
	builders []*FnetCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the FnetCategory entities in the database.
func (fccb *FnetCategoryCreateBulk) Save(ctx context.Context) ([]*FnetCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fccb.builders))
	nodes := make([]*FnetCategory, len(fccb.builders))
	mutators := make([]Mutator, len(fccb.builders))
	for i := range fccb.builders {
		func(i int, root context.Context) {
			builder := fccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FnetCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fccb *FnetCategoryCreateBulk) SaveX(ctx context.Context) []*FnetCategory {
	v, err := fccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fccb *FnetCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := fccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fccb *FnetCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := fccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FnetCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FnetCategoryUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (fccb *FnetCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *FnetCategoryUpsertBulk {
	fccb.conflict = opts
	return &FnetCategoryUpsertBulk{
		create: fccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FnetCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fccb *FnetCategoryCreateBulk) OnConflictColumns(columns ...string) *FnetCategoryUpsertBulk {
	fccb.conflict = append(fccb.conflict, sql.ConflictColumns(columns...))
	return &FnetCategoryUpsertBulk{
		create: fccb,
	}
}

// FnetCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of FnetCategory nodes.
type FnetCategoryUpsertBulk struct {
	create *FnetCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FnetCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FnetCategoryUpsertBulk) UpdateNewValues() *FnetCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.Name(); exists {
				s.SetIgnore(fnetcategory.FieldName)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FnetCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FnetCategoryUpsertBulk) Ignore() *FnetCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FnetCategoryUpsertBulk) DoNothing() *FnetCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FnetCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *FnetCategoryUpsertBulk) Update(set func(*FnetCategoryUpsert)) *FnetCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FnetCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *FnetCategoryUpsertBulk) SetName(v string) *FnetCategoryUpsertBulk {
	return u.Update(func(s *FnetCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *FnetCategoryUpsertBulk) UpdateName() *FnetCategoryUpsertBulk {
	return u.Update(func(s *FnetCategoryUpsert) {
		s.UpdateName()
	})
}

// Exec executes the query.
func (u *FnetCategoryUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FnetCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FnetCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FnetCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
