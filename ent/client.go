// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/lenon/gofii/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lenon/gofii/ent/fnetcategory"
	"github.com/lenon/gofii/ent/fnetdocument"
	"github.com/lenon/gofii/ent/fnetsubcategory1"
	"github.com/lenon/gofii/ent/fnetsubcategory2"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// FnetCategory is the client for interacting with the FnetCategory builders.
	FnetCategory *FnetCategoryClient
	// FnetDocument is the client for interacting with the FnetDocument builders.
	FnetDocument *FnetDocumentClient
	// FnetSubCategory1 is the client for interacting with the FnetSubCategory1 builders.
	FnetSubCategory1 *FnetSubCategory1Client
	// FnetSubCategory2 is the client for interacting with the FnetSubCategory2 builders.
	FnetSubCategory2 *FnetSubCategory2Client
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.FnetCategory = NewFnetCategoryClient(c.config)
	c.FnetDocument = NewFnetDocumentClient(c.config)
	c.FnetSubCategory1 = NewFnetSubCategory1Client(c.config)
	c.FnetSubCategory2 = NewFnetSubCategory2Client(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		FnetCategory:     NewFnetCategoryClient(cfg),
		FnetDocument:     NewFnetDocumentClient(cfg),
		FnetSubCategory1: NewFnetSubCategory1Client(cfg),
		FnetSubCategory2: NewFnetSubCategory2Client(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:              ctx,
		config:           cfg,
		FnetCategory:     NewFnetCategoryClient(cfg),
		FnetDocument:     NewFnetDocumentClient(cfg),
		FnetSubCategory1: NewFnetSubCategory1Client(cfg),
		FnetSubCategory2: NewFnetSubCategory2Client(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		FnetCategory.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.FnetCategory.Use(hooks...)
	c.FnetDocument.Use(hooks...)
	c.FnetSubCategory1.Use(hooks...)
	c.FnetSubCategory2.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.FnetCategory.Intercept(interceptors...)
	c.FnetDocument.Intercept(interceptors...)
	c.FnetSubCategory1.Intercept(interceptors...)
	c.FnetSubCategory2.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *FnetCategoryMutation:
		return c.FnetCategory.mutate(ctx, m)
	case *FnetDocumentMutation:
		return c.FnetDocument.mutate(ctx, m)
	case *FnetSubCategory1Mutation:
		return c.FnetSubCategory1.mutate(ctx, m)
	case *FnetSubCategory2Mutation:
		return c.FnetSubCategory2.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// FnetCategoryClient is a client for the FnetCategory schema.
type FnetCategoryClient struct {
	config
}

// NewFnetCategoryClient returns a client for the FnetCategory from the given config.
func NewFnetCategoryClient(c config) *FnetCategoryClient {
	return &FnetCategoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fnetcategory.Hooks(f(g(h())))`.
func (c *FnetCategoryClient) Use(hooks ...Hook) {
	c.hooks.FnetCategory = append(c.hooks.FnetCategory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fnetcategory.Intercept(f(g(h())))`.
func (c *FnetCategoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.FnetCategory = append(c.inters.FnetCategory, interceptors...)
}

// Create returns a builder for creating a FnetCategory entity.
func (c *FnetCategoryClient) Create() *FnetCategoryCreate {
	mutation := newFnetCategoryMutation(c.config, OpCreate)
	return &FnetCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FnetCategory entities.
func (c *FnetCategoryClient) CreateBulk(builders ...*FnetCategoryCreate) *FnetCategoryCreateBulk {
	return &FnetCategoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FnetCategoryClient) MapCreateBulk(slice any, setFunc func(*FnetCategoryCreate, int)) *FnetCategoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FnetCategoryCreateBulk{err: fmt.Errorf("calling to FnetCategoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FnetCategoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FnetCategoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FnetCategory.
func (c *FnetCategoryClient) Update() *FnetCategoryUpdate {
	mutation := newFnetCategoryMutation(c.config, OpUpdate)
	return &FnetCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FnetCategoryClient) UpdateOne(fc *FnetCategory) *FnetCategoryUpdateOne {
	mutation := newFnetCategoryMutation(c.config, OpUpdateOne, withFnetCategory(fc))
	return &FnetCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FnetCategoryClient) UpdateOneID(id int) *FnetCategoryUpdateOne {
	mutation := newFnetCategoryMutation(c.config, OpUpdateOne, withFnetCategoryID(id))
	return &FnetCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FnetCategory.
func (c *FnetCategoryClient) Delete() *FnetCategoryDelete {
	mutation := newFnetCategoryMutation(c.config, OpDelete)
	return &FnetCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FnetCategoryClient) DeleteOne(fc *FnetCategory) *FnetCategoryDeleteOne {
	return c.DeleteOneID(fc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FnetCategoryClient) DeleteOneID(id int) *FnetCategoryDeleteOne {
	builder := c.Delete().Where(fnetcategory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FnetCategoryDeleteOne{builder}
}

// Query returns a query builder for FnetCategory.
func (c *FnetCategoryClient) Query() *FnetCategoryQuery {
	return &FnetCategoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFnetCategory},
		inters: c.Interceptors(),
	}
}

// Get returns a FnetCategory entity by its id.
func (c *FnetCategoryClient) Get(ctx context.Context, id int) (*FnetCategory, error) {
	return c.Query().Where(fnetcategory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FnetCategoryClient) GetX(ctx context.Context, id int) *FnetCategory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDocuments queries the documents edge of a FnetCategory.
func (c *FnetCategoryClient) QueryDocuments(fc *FnetCategory) *FnetDocumentQuery {
	query := (&FnetDocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fnetcategory.Table, fnetcategory.FieldID, id),
			sqlgraph.To(fnetdocument.Table, fnetdocument.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fnetcategory.DocumentsTable, fnetcategory.DocumentsColumn),
		)
		fromV = sqlgraph.Neighbors(fc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FnetCategoryClient) Hooks() []Hook {
	return c.hooks.FnetCategory
}

// Interceptors returns the client interceptors.
func (c *FnetCategoryClient) Interceptors() []Interceptor {
	return c.inters.FnetCategory
}

func (c *FnetCategoryClient) mutate(ctx context.Context, m *FnetCategoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FnetCategoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FnetCategoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FnetCategoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FnetCategoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FnetCategory mutation op: %q", m.Op())
	}
}

// FnetDocumentClient is a client for the FnetDocument schema.
type FnetDocumentClient struct {
	config
}

// NewFnetDocumentClient returns a client for the FnetDocument from the given config.
func NewFnetDocumentClient(c config) *FnetDocumentClient {
	return &FnetDocumentClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fnetdocument.Hooks(f(g(h())))`.
func (c *FnetDocumentClient) Use(hooks ...Hook) {
	c.hooks.FnetDocument = append(c.hooks.FnetDocument, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fnetdocument.Intercept(f(g(h())))`.
func (c *FnetDocumentClient) Intercept(interceptors ...Interceptor) {
	c.inters.FnetDocument = append(c.inters.FnetDocument, interceptors...)
}

// Create returns a builder for creating a FnetDocument entity.
func (c *FnetDocumentClient) Create() *FnetDocumentCreate {
	mutation := newFnetDocumentMutation(c.config, OpCreate)
	return &FnetDocumentCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FnetDocument entities.
func (c *FnetDocumentClient) CreateBulk(builders ...*FnetDocumentCreate) *FnetDocumentCreateBulk {
	return &FnetDocumentCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FnetDocumentClient) MapCreateBulk(slice any, setFunc func(*FnetDocumentCreate, int)) *FnetDocumentCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FnetDocumentCreateBulk{err: fmt.Errorf("calling to FnetDocumentClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FnetDocumentCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FnetDocumentCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FnetDocument.
func (c *FnetDocumentClient) Update() *FnetDocumentUpdate {
	mutation := newFnetDocumentMutation(c.config, OpUpdate)
	return &FnetDocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FnetDocumentClient) UpdateOne(fd *FnetDocument) *FnetDocumentUpdateOne {
	mutation := newFnetDocumentMutation(c.config, OpUpdateOne, withFnetDocument(fd))
	return &FnetDocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FnetDocumentClient) UpdateOneID(id int) *FnetDocumentUpdateOne {
	mutation := newFnetDocumentMutation(c.config, OpUpdateOne, withFnetDocumentID(id))
	return &FnetDocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FnetDocument.
func (c *FnetDocumentClient) Delete() *FnetDocumentDelete {
	mutation := newFnetDocumentMutation(c.config, OpDelete)
	return &FnetDocumentDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FnetDocumentClient) DeleteOne(fd *FnetDocument) *FnetDocumentDeleteOne {
	return c.DeleteOneID(fd.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FnetDocumentClient) DeleteOneID(id int) *FnetDocumentDeleteOne {
	builder := c.Delete().Where(fnetdocument.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FnetDocumentDeleteOne{builder}
}

// Query returns a query builder for FnetDocument.
func (c *FnetDocumentClient) Query() *FnetDocumentQuery {
	return &FnetDocumentQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFnetDocument},
		inters: c.Interceptors(),
	}
}

// Get returns a FnetDocument entity by its id.
func (c *FnetDocumentClient) Get(ctx context.Context, id int) (*FnetDocument, error) {
	return c.Query().Where(fnetdocument.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FnetDocumentClient) GetX(ctx context.Context, id int) *FnetDocument {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCategory queries the category edge of a FnetDocument.
func (c *FnetDocumentClient) QueryCategory(fd *FnetDocument) *FnetCategoryQuery {
	query := (&FnetCategoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fnetdocument.Table, fnetdocument.FieldID, id),
			sqlgraph.To(fnetcategory.Table, fnetcategory.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fnetdocument.CategoryTable, fnetdocument.CategoryColumn),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubCategory1 queries the sub_category1 edge of a FnetDocument.
func (c *FnetDocumentClient) QuerySubCategory1(fd *FnetDocument) *FnetSubCategory1Query {
	query := (&FnetSubCategory1Client{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fnetdocument.Table, fnetdocument.FieldID, id),
			sqlgraph.To(fnetsubcategory1.Table, fnetsubcategory1.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fnetdocument.SubCategory1Table, fnetdocument.SubCategory1Column),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySubCategory2 queries the sub_category2 edge of a FnetDocument.
func (c *FnetDocumentClient) QuerySubCategory2(fd *FnetDocument) *FnetSubCategory2Query {
	query := (&FnetSubCategory2Client{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fd.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fnetdocument.Table, fnetdocument.FieldID, id),
			sqlgraph.To(fnetsubcategory2.Table, fnetsubcategory2.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, fnetdocument.SubCategory2Table, fnetdocument.SubCategory2Column),
		)
		fromV = sqlgraph.Neighbors(fd.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FnetDocumentClient) Hooks() []Hook {
	return c.hooks.FnetDocument
}

// Interceptors returns the client interceptors.
func (c *FnetDocumentClient) Interceptors() []Interceptor {
	return c.inters.FnetDocument
}

func (c *FnetDocumentClient) mutate(ctx context.Context, m *FnetDocumentMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FnetDocumentCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FnetDocumentUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FnetDocumentUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FnetDocumentDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FnetDocument mutation op: %q", m.Op())
	}
}

// FnetSubCategory1Client is a client for the FnetSubCategory1 schema.
type FnetSubCategory1Client struct {
	config
}

// NewFnetSubCategory1Client returns a client for the FnetSubCategory1 from the given config.
func NewFnetSubCategory1Client(c config) *FnetSubCategory1Client {
	return &FnetSubCategory1Client{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fnetsubcategory1.Hooks(f(g(h())))`.
func (c *FnetSubCategory1Client) Use(hooks ...Hook) {
	c.hooks.FnetSubCategory1 = append(c.hooks.FnetSubCategory1, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fnetsubcategory1.Intercept(f(g(h())))`.
func (c *FnetSubCategory1Client) Intercept(interceptors ...Interceptor) {
	c.inters.FnetSubCategory1 = append(c.inters.FnetSubCategory1, interceptors...)
}

// Create returns a builder for creating a FnetSubCategory1 entity.
func (c *FnetSubCategory1Client) Create() *FnetSubCategory1Create {
	mutation := newFnetSubCategory1Mutation(c.config, OpCreate)
	return &FnetSubCategory1Create{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FnetSubCategory1 entities.
func (c *FnetSubCategory1Client) CreateBulk(builders ...*FnetSubCategory1Create) *FnetSubCategory1CreateBulk {
	return &FnetSubCategory1CreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FnetSubCategory1Client) MapCreateBulk(slice any, setFunc func(*FnetSubCategory1Create, int)) *FnetSubCategory1CreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FnetSubCategory1CreateBulk{err: fmt.Errorf("calling to FnetSubCategory1Client.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FnetSubCategory1Create, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FnetSubCategory1CreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FnetSubCategory1.
func (c *FnetSubCategory1Client) Update() *FnetSubCategory1Update {
	mutation := newFnetSubCategory1Mutation(c.config, OpUpdate)
	return &FnetSubCategory1Update{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FnetSubCategory1Client) UpdateOne(fsc *FnetSubCategory1) *FnetSubCategory1UpdateOne {
	mutation := newFnetSubCategory1Mutation(c.config, OpUpdateOne, withFnetSubCategory1(fsc))
	return &FnetSubCategory1UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FnetSubCategory1Client) UpdateOneID(id int) *FnetSubCategory1UpdateOne {
	mutation := newFnetSubCategory1Mutation(c.config, OpUpdateOne, withFnetSubCategory1ID(id))
	return &FnetSubCategory1UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FnetSubCategory1.
func (c *FnetSubCategory1Client) Delete() *FnetSubCategory1Delete {
	mutation := newFnetSubCategory1Mutation(c.config, OpDelete)
	return &FnetSubCategory1Delete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FnetSubCategory1Client) DeleteOne(fsc *FnetSubCategory1) *FnetSubCategory1DeleteOne {
	return c.DeleteOneID(fsc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FnetSubCategory1Client) DeleteOneID(id int) *FnetSubCategory1DeleteOne {
	builder := c.Delete().Where(fnetsubcategory1.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FnetSubCategory1DeleteOne{builder}
}

// Query returns a query builder for FnetSubCategory1.
func (c *FnetSubCategory1Client) Query() *FnetSubCategory1Query {
	return &FnetSubCategory1Query{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFnetSubCategory1},
		inters: c.Interceptors(),
	}
}

// Get returns a FnetSubCategory1 entity by its id.
func (c *FnetSubCategory1Client) Get(ctx context.Context, id int) (*FnetSubCategory1, error) {
	return c.Query().Where(fnetsubcategory1.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FnetSubCategory1Client) GetX(ctx context.Context, id int) *FnetSubCategory1 {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDocuments queries the documents edge of a FnetSubCategory1.
func (c *FnetSubCategory1Client) QueryDocuments(fsc *FnetSubCategory1) *FnetDocumentQuery {
	query := (&FnetDocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fnetsubcategory1.Table, fnetsubcategory1.FieldID, id),
			sqlgraph.To(fnetdocument.Table, fnetdocument.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fnetsubcategory1.DocumentsTable, fnetsubcategory1.DocumentsColumn),
		)
		fromV = sqlgraph.Neighbors(fsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FnetSubCategory1Client) Hooks() []Hook {
	return c.hooks.FnetSubCategory1
}

// Interceptors returns the client interceptors.
func (c *FnetSubCategory1Client) Interceptors() []Interceptor {
	return c.inters.FnetSubCategory1
}

func (c *FnetSubCategory1Client) mutate(ctx context.Context, m *FnetSubCategory1Mutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FnetSubCategory1Create{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FnetSubCategory1Update{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FnetSubCategory1UpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FnetSubCategory1Delete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FnetSubCategory1 mutation op: %q", m.Op())
	}
}

// FnetSubCategory2Client is a client for the FnetSubCategory2 schema.
type FnetSubCategory2Client struct {
	config
}

// NewFnetSubCategory2Client returns a client for the FnetSubCategory2 from the given config.
func NewFnetSubCategory2Client(c config) *FnetSubCategory2Client {
	return &FnetSubCategory2Client{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `fnetsubcategory2.Hooks(f(g(h())))`.
func (c *FnetSubCategory2Client) Use(hooks ...Hook) {
	c.hooks.FnetSubCategory2 = append(c.hooks.FnetSubCategory2, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `fnetsubcategory2.Intercept(f(g(h())))`.
func (c *FnetSubCategory2Client) Intercept(interceptors ...Interceptor) {
	c.inters.FnetSubCategory2 = append(c.inters.FnetSubCategory2, interceptors...)
}

// Create returns a builder for creating a FnetSubCategory2 entity.
func (c *FnetSubCategory2Client) Create() *FnetSubCategory2Create {
	mutation := newFnetSubCategory2Mutation(c.config, OpCreate)
	return &FnetSubCategory2Create{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of FnetSubCategory2 entities.
func (c *FnetSubCategory2Client) CreateBulk(builders ...*FnetSubCategory2Create) *FnetSubCategory2CreateBulk {
	return &FnetSubCategory2CreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *FnetSubCategory2Client) MapCreateBulk(slice any, setFunc func(*FnetSubCategory2Create, int)) *FnetSubCategory2CreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &FnetSubCategory2CreateBulk{err: fmt.Errorf("calling to FnetSubCategory2Client.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*FnetSubCategory2Create, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &FnetSubCategory2CreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for FnetSubCategory2.
func (c *FnetSubCategory2Client) Update() *FnetSubCategory2Update {
	mutation := newFnetSubCategory2Mutation(c.config, OpUpdate)
	return &FnetSubCategory2Update{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *FnetSubCategory2Client) UpdateOne(fsc *FnetSubCategory2) *FnetSubCategory2UpdateOne {
	mutation := newFnetSubCategory2Mutation(c.config, OpUpdateOne, withFnetSubCategory2(fsc))
	return &FnetSubCategory2UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *FnetSubCategory2Client) UpdateOneID(id int) *FnetSubCategory2UpdateOne {
	mutation := newFnetSubCategory2Mutation(c.config, OpUpdateOne, withFnetSubCategory2ID(id))
	return &FnetSubCategory2UpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for FnetSubCategory2.
func (c *FnetSubCategory2Client) Delete() *FnetSubCategory2Delete {
	mutation := newFnetSubCategory2Mutation(c.config, OpDelete)
	return &FnetSubCategory2Delete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *FnetSubCategory2Client) DeleteOne(fsc *FnetSubCategory2) *FnetSubCategory2DeleteOne {
	return c.DeleteOneID(fsc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *FnetSubCategory2Client) DeleteOneID(id int) *FnetSubCategory2DeleteOne {
	builder := c.Delete().Where(fnetsubcategory2.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &FnetSubCategory2DeleteOne{builder}
}

// Query returns a query builder for FnetSubCategory2.
func (c *FnetSubCategory2Client) Query() *FnetSubCategory2Query {
	return &FnetSubCategory2Query{
		config: c.config,
		ctx:    &QueryContext{Type: TypeFnetSubCategory2},
		inters: c.Interceptors(),
	}
}

// Get returns a FnetSubCategory2 entity by its id.
func (c *FnetSubCategory2Client) Get(ctx context.Context, id int) (*FnetSubCategory2, error) {
	return c.Query().Where(fnetsubcategory2.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *FnetSubCategory2Client) GetX(ctx context.Context, id int) *FnetSubCategory2 {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryDocuments queries the documents edge of a FnetSubCategory2.
func (c *FnetSubCategory2Client) QueryDocuments(fsc *FnetSubCategory2) *FnetDocumentQuery {
	query := (&FnetDocumentClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := fsc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(fnetsubcategory2.Table, fnetsubcategory2.FieldID, id),
			sqlgraph.To(fnetdocument.Table, fnetdocument.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fnetsubcategory2.DocumentsTable, fnetsubcategory2.DocumentsColumn),
		)
		fromV = sqlgraph.Neighbors(fsc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *FnetSubCategory2Client) Hooks() []Hook {
	return c.hooks.FnetSubCategory2
}

// Interceptors returns the client interceptors.
func (c *FnetSubCategory2Client) Interceptors() []Interceptor {
	return c.inters.FnetSubCategory2
}

func (c *FnetSubCategory2Client) mutate(ctx context.Context, m *FnetSubCategory2Mutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&FnetSubCategory2Create{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&FnetSubCategory2Update{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&FnetSubCategory2UpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&FnetSubCategory2Delete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown FnetSubCategory2 mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		FnetCategory, FnetDocument, FnetSubCategory1, FnetSubCategory2 []ent.Hook
	}
	inters struct {
		FnetCategory, FnetDocument, FnetSubCategory1, FnetSubCategory2 []ent.Interceptor
	}
)
