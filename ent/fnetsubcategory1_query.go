// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lenon/gofii/ent/fnetdocument"
	"github.com/lenon/gofii/ent/fnetsubcategory1"
	"github.com/lenon/gofii/ent/predicate"
)

// FnetSubCategory1Query is the builder for querying FnetSubCategory1 entities.
type FnetSubCategory1Query struct {
	config
	ctx           *QueryContext
	order         []fnetsubcategory1.OrderOption
	inters        []Interceptor
	predicates    []predicate.FnetSubCategory1
	withDocuments *FnetDocumentQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FnetSubCategory1Query builder.
func (fsc *FnetSubCategory1Query) Where(ps ...predicate.FnetSubCategory1) *FnetSubCategory1Query {
	fsc.predicates = append(fsc.predicates, ps...)
	return fsc
}

// Limit the number of records to be returned by this query.
func (fsc *FnetSubCategory1Query) Limit(limit int) *FnetSubCategory1Query {
	fsc.ctx.Limit = &limit
	return fsc
}

// Offset to start from.
func (fsc *FnetSubCategory1Query) Offset(offset int) *FnetSubCategory1Query {
	fsc.ctx.Offset = &offset
	return fsc
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fsc *FnetSubCategory1Query) Unique(unique bool) *FnetSubCategory1Query {
	fsc.ctx.Unique = &unique
	return fsc
}

// Order specifies how the records should be ordered.
func (fsc *FnetSubCategory1Query) Order(o ...fnetsubcategory1.OrderOption) *FnetSubCategory1Query {
	fsc.order = append(fsc.order, o...)
	return fsc
}

// QueryDocuments chains the current query on the "documents" edge.
func (fsc *FnetSubCategory1Query) QueryDocuments() *FnetDocumentQuery {
	query := (&FnetDocumentClient{config: fsc.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fsc.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fsc.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(fnetsubcategory1.Table, fnetsubcategory1.FieldID, selector),
			sqlgraph.To(fnetdocument.Table, fnetdocument.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, fnetsubcategory1.DocumentsTable, fnetsubcategory1.DocumentsColumn),
		)
		fromU = sqlgraph.SetNeighbors(fsc.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first FnetSubCategory1 entity from the query.
// Returns a *NotFoundError when no FnetSubCategory1 was found.
func (fsc *FnetSubCategory1Query) First(ctx context.Context) (*FnetSubCategory1, error) {
	nodes, err := fsc.Limit(1).All(setContextOp(ctx, fsc.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{fnetsubcategory1.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) FirstX(ctx context.Context) *FnetSubCategory1 {
	node, err := fsc.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first FnetSubCategory1 ID from the query.
// Returns a *NotFoundError when no FnetSubCategory1 ID was found.
func (fsc *FnetSubCategory1Query) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fsc.Limit(1).IDs(setContextOp(ctx, fsc.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{fnetsubcategory1.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) FirstIDX(ctx context.Context) int {
	id, err := fsc.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single FnetSubCategory1 entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one FnetSubCategory1 entity is found.
// Returns a *NotFoundError when no FnetSubCategory1 entities are found.
func (fsc *FnetSubCategory1Query) Only(ctx context.Context) (*FnetSubCategory1, error) {
	nodes, err := fsc.Limit(2).All(setContextOp(ctx, fsc.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{fnetsubcategory1.Label}
	default:
		return nil, &NotSingularError{fnetsubcategory1.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) OnlyX(ctx context.Context) *FnetSubCategory1 {
	node, err := fsc.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only FnetSubCategory1 ID in the query.
// Returns a *NotSingularError when more than one FnetSubCategory1 ID is found.
// Returns a *NotFoundError when no entities are found.
func (fsc *FnetSubCategory1Query) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = fsc.Limit(2).IDs(setContextOp(ctx, fsc.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{fnetsubcategory1.Label}
	default:
		err = &NotSingularError{fnetsubcategory1.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) OnlyIDX(ctx context.Context) int {
	id, err := fsc.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of FnetSubCategory1s.
func (fsc *FnetSubCategory1Query) All(ctx context.Context) ([]*FnetSubCategory1, error) {
	ctx = setContextOp(ctx, fsc.ctx, "All")
	if err := fsc.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*FnetSubCategory1, *FnetSubCategory1Query]()
	return withInterceptors[[]*FnetSubCategory1](ctx, fsc, qr, fsc.inters)
}

// AllX is like All, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) AllX(ctx context.Context) []*FnetSubCategory1 {
	nodes, err := fsc.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of FnetSubCategory1 IDs.
func (fsc *FnetSubCategory1Query) IDs(ctx context.Context) (ids []int, err error) {
	if fsc.ctx.Unique == nil && fsc.path != nil {
		fsc.Unique(true)
	}
	ctx = setContextOp(ctx, fsc.ctx, "IDs")
	if err = fsc.Select(fnetsubcategory1.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) IDsX(ctx context.Context) []int {
	ids, err := fsc.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fsc *FnetSubCategory1Query) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fsc.ctx, "Count")
	if err := fsc.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fsc, querierCount[*FnetSubCategory1Query](), fsc.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) CountX(ctx context.Context) int {
	count, err := fsc.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fsc *FnetSubCategory1Query) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fsc.ctx, "Exist")
	switch _, err := fsc.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fsc *FnetSubCategory1Query) ExistX(ctx context.Context) bool {
	exist, err := fsc.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FnetSubCategory1Query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fsc *FnetSubCategory1Query) Clone() *FnetSubCategory1Query {
	if fsc == nil {
		return nil
	}
	return &FnetSubCategory1Query{
		config:        fsc.config,
		ctx:           fsc.ctx.Clone(),
		order:         append([]fnetsubcategory1.OrderOption{}, fsc.order...),
		inters:        append([]Interceptor{}, fsc.inters...),
		predicates:    append([]predicate.FnetSubCategory1{}, fsc.predicates...),
		withDocuments: fsc.withDocuments.Clone(),
		// clone intermediate query.
		sql:  fsc.sql.Clone(),
		path: fsc.path,
	}
}

// WithDocuments tells the query-builder to eager-load the nodes that are connected to
// the "documents" edge. The optional arguments are used to configure the query builder of the edge.
func (fsc *FnetSubCategory1Query) WithDocuments(opts ...func(*FnetDocumentQuery)) *FnetSubCategory1Query {
	query := (&FnetDocumentClient{config: fsc.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fsc.withDocuments = query
	return fsc
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.FnetSubCategory1.Query().
//		GroupBy(fnetsubcategory1.FieldName).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (fsc *FnetSubCategory1Query) GroupBy(field string, fields ...string) *FnetSubCategory1GroupBy {
	fsc.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FnetSubCategory1GroupBy{build: fsc}
	grbuild.flds = &fsc.ctx.Fields
	grbuild.label = fnetsubcategory1.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Name string `json:"name,omitempty"`
//	}
//
//	client.FnetSubCategory1.Query().
//		Select(fnetsubcategory1.FieldName).
//		Scan(ctx, &v)
func (fsc *FnetSubCategory1Query) Select(fields ...string) *FnetSubCategory1Select {
	fsc.ctx.Fields = append(fsc.ctx.Fields, fields...)
	sbuild := &FnetSubCategory1Select{FnetSubCategory1Query: fsc}
	sbuild.label = fnetsubcategory1.Label
	sbuild.flds, sbuild.scan = &fsc.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FnetSubCategory1Select configured with the given aggregations.
func (fsc *FnetSubCategory1Query) Aggregate(fns ...AggregateFunc) *FnetSubCategory1Select {
	return fsc.Select().Aggregate(fns...)
}

func (fsc *FnetSubCategory1Query) prepareQuery(ctx context.Context) error {
	for _, inter := range fsc.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fsc); err != nil {
				return err
			}
		}
	}
	for _, f := range fsc.ctx.Fields {
		if !fnetsubcategory1.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if fsc.path != nil {
		prev, err := fsc.path(ctx)
		if err != nil {
			return err
		}
		fsc.sql = prev
	}
	return nil
}

func (fsc *FnetSubCategory1Query) sqlAll(ctx context.Context, hooks ...queryHook) ([]*FnetSubCategory1, error) {
	var (
		nodes       = []*FnetSubCategory1{}
		_spec       = fsc.querySpec()
		loadedTypes = [1]bool{
			fsc.withDocuments != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*FnetSubCategory1).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &FnetSubCategory1{config: fsc.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fsc.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fsc.withDocuments; query != nil {
		if err := fsc.loadDocuments(ctx, query, nodes,
			func(n *FnetSubCategory1) { n.Edges.Documents = []*FnetDocument{} },
			func(n *FnetSubCategory1, e *FnetDocument) { n.Edges.Documents = append(n.Edges.Documents, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fsc *FnetSubCategory1Query) loadDocuments(ctx context.Context, query *FnetDocumentQuery, nodes []*FnetSubCategory1, init func(*FnetSubCategory1), assign func(*FnetSubCategory1, *FnetDocument)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*FnetSubCategory1)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	query.Where(predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(fnetsubcategory1.DocumentsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.sub_category1_id
		if fk == nil {
			return fmt.Errorf(`foreign-key "sub_category1_id" is nil for node %v`, n.ID)
		}
		node, ok := nodeids[*fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "sub_category1_id" returned %v for node %v`, *fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (fsc *FnetSubCategory1Query) sqlCount(ctx context.Context) (int, error) {
	_spec := fsc.querySpec()
	_spec.Node.Columns = fsc.ctx.Fields
	if len(fsc.ctx.Fields) > 0 {
		_spec.Unique = fsc.ctx.Unique != nil && *fsc.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fsc.driver, _spec)
}

func (fsc *FnetSubCategory1Query) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(fnetsubcategory1.Table, fnetsubcategory1.Columns, sqlgraph.NewFieldSpec(fnetsubcategory1.FieldID, field.TypeInt))
	_spec.From = fsc.sql
	if unique := fsc.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fsc.path != nil {
		_spec.Unique = true
	}
	if fields := fsc.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fnetsubcategory1.FieldID)
		for i := range fields {
			if fields[i] != fnetsubcategory1.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fsc.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fsc.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fsc.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fsc.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fsc *FnetSubCategory1Query) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fsc.driver.Dialect())
	t1 := builder.Table(fnetsubcategory1.Table)
	columns := fsc.ctx.Fields
	if len(columns) == 0 {
		columns = fnetsubcategory1.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fsc.sql != nil {
		selector = fsc.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fsc.ctx.Unique != nil && *fsc.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range fsc.predicates {
		p(selector)
	}
	for _, p := range fsc.order {
		p(selector)
	}
	if offset := fsc.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fsc.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// FnetSubCategory1GroupBy is the group-by builder for FnetSubCategory1 entities.
type FnetSubCategory1GroupBy struct {
	selector
	build *FnetSubCategory1Query
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fscb *FnetSubCategory1GroupBy) Aggregate(fns ...AggregateFunc) *FnetSubCategory1GroupBy {
	fscb.fns = append(fscb.fns, fns...)
	return fscb
}

// Scan applies the selector query and scans the result into the given value.
func (fscb *FnetSubCategory1GroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fscb.build.ctx, "GroupBy")
	if err := fscb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FnetSubCategory1Query, *FnetSubCategory1GroupBy](ctx, fscb.build, fscb, fscb.build.inters, v)
}

func (fscb *FnetSubCategory1GroupBy) sqlScan(ctx context.Context, root *FnetSubCategory1Query, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fscb.fns))
	for _, fn := range fscb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fscb.flds)+len(fscb.fns))
		for _, f := range *fscb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fscb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fscb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FnetSubCategory1Select is the builder for selecting fields of FnetSubCategory1 entities.
type FnetSubCategory1Select struct {
	*FnetSubCategory1Query
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fsc *FnetSubCategory1Select) Aggregate(fns ...AggregateFunc) *FnetSubCategory1Select {
	fsc.fns = append(fsc.fns, fns...)
	return fsc
}

// Scan applies the selector query and scans the result into the given value.
func (fsc *FnetSubCategory1Select) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fsc.ctx, "Select")
	if err := fsc.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FnetSubCategory1Query, *FnetSubCategory1Select](ctx, fsc.FnetSubCategory1Query, fsc, fsc.inters, v)
}

func (fsc *FnetSubCategory1Select) sqlScan(ctx context.Context, root *FnetSubCategory1Query, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fsc.fns))
	for _, fn := range fsc.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fsc.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fsc.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
