// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lenon/gofii/ent/fnetcategory"
	"github.com/lenon/gofii/ent/fnetdocument"
	"github.com/lenon/gofii/ent/fnetsubcategory1"
	"github.com/lenon/gofii/ent/fnetsubcategory2"
)

// FnetDocument is the model entity for the FnetDocument schema.
type FnetDocument struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FnetID holds the value of the "fnet_id" field.
	FnetID int `json:"fnet_id,omitempty"`
	// AdditionalInformation holds the value of the "additional_information" field.
	AdditionalInformation string `json:"additional_information,omitempty"`
	// CategoryStr holds the value of the "category_str" field.
	CategoryStr string `json:"category_str,omitempty"`
	// DocumentStatus holds the value of the "document_status" field.
	DocumentStatus string `json:"document_status,omitempty"`
	// FundDescription holds the value of the "fund_description" field.
	FundDescription string `json:"fund_description,omitempty"`
	// HighPriority holds the value of the "high_priority" field.
	HighPriority bool `json:"high_priority,omitempty"`
	// MarketName holds the value of the "market_name" field.
	MarketName string `json:"market_name,omitempty"`
	// ReferenceDate holds the value of the "reference_date" field.
	ReferenceDate time.Time `json:"reference_date,omitempty"`
	// ReferenceDateFormat holds the value of the "reference_date_format" field.
	ReferenceDateFormat string `json:"reference_date_format,omitempty"`
	// ReferenceDateStr holds the value of the "reference_date_str" field.
	ReferenceDateStr string `json:"reference_date_str,omitempty"`
	// Reviewed holds the value of the "reviewed" field.
	Reviewed string `json:"reviewed,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// StatusDescription holds the value of the "status_description" field.
	StatusDescription string `json:"status_description,omitempty"`
	// SubCategory1Str holds the value of the "sub_category1_str" field.
	SubCategory1Str string `json:"sub_category1_str,omitempty"`
	// SubCategory2Str holds the value of the "sub_category2_str" field.
	SubCategory2Str string `json:"sub_category2_str,omitempty"`
	// SubmissionDate holds the value of the "submission_date" field.
	SubmissionDate time.Time `json:"submission_date,omitempty"`
	// SubmissionDateStr holds the value of the "submission_date_str" field.
	SubmissionDateStr string `json:"submission_date_str,omitempty"`
	// SubmissionMethod holds the value of the "submission_method" field.
	SubmissionMethod string `json:"submission_method,omitempty"`
	// SubmissionMethodDescription holds the value of the "submission_method_description" field.
	SubmissionMethodDescription string `json:"submission_method_description,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FnetDocumentQuery when eager-loading is set.
	Edges            FnetDocumentEdges `json:"edges"`
	category_id      *int
	sub_category1_id *int
	sub_category2_id *int
}

// FnetDocumentEdges holds the relations/edges for other nodes in the graph.
type FnetDocumentEdges struct {
	// Category holds the value of the category edge.
	Category *FnetCategory `json:"category,omitempty"`
	// SubCategory1 holds the value of the sub_category1 edge.
	SubCategory1 *FnetSubCategory1 `json:"sub_category1,omitempty"`
	// SubCategory2 holds the value of the sub_category2 edge.
	SubCategory2 *FnetSubCategory2 `json:"sub_category2,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CategoryOrErr returns the Category value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FnetDocumentEdges) CategoryOrErr() (*FnetCategory, error) {
	if e.loadedTypes[0] {
		if e.Category == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fnetcategory.Label}
		}
		return e.Category, nil
	}
	return nil, &NotLoadedError{edge: "category"}
}

// SubCategory1OrErr returns the SubCategory1 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FnetDocumentEdges) SubCategory1OrErr() (*FnetSubCategory1, error) {
	if e.loadedTypes[1] {
		if e.SubCategory1 == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fnetsubcategory1.Label}
		}
		return e.SubCategory1, nil
	}
	return nil, &NotLoadedError{edge: "sub_category1"}
}

// SubCategory2OrErr returns the SubCategory2 value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e FnetDocumentEdges) SubCategory2OrErr() (*FnetSubCategory2, error) {
	if e.loadedTypes[2] {
		if e.SubCategory2 == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: fnetsubcategory2.Label}
		}
		return e.SubCategory2, nil
	}
	return nil, &NotLoadedError{edge: "sub_category2"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FnetDocument) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fnetdocument.FieldHighPriority:
			values[i] = new(sql.NullBool)
		case fnetdocument.FieldID, fnetdocument.FieldFnetID, fnetdocument.FieldVersion:
			values[i] = new(sql.NullInt64)
		case fnetdocument.FieldAdditionalInformation, fnetdocument.FieldCategoryStr, fnetdocument.FieldDocumentStatus, fnetdocument.FieldFundDescription, fnetdocument.FieldMarketName, fnetdocument.FieldReferenceDateFormat, fnetdocument.FieldReferenceDateStr, fnetdocument.FieldReviewed, fnetdocument.FieldStatus, fnetdocument.FieldStatusDescription, fnetdocument.FieldSubCategory1Str, fnetdocument.FieldSubCategory2Str, fnetdocument.FieldSubmissionDateStr, fnetdocument.FieldSubmissionMethod, fnetdocument.FieldSubmissionMethodDescription:
			values[i] = new(sql.NullString)
		case fnetdocument.FieldReferenceDate, fnetdocument.FieldSubmissionDate:
			values[i] = new(sql.NullTime)
		case fnetdocument.ForeignKeys[0]: // category_id
			values[i] = new(sql.NullInt64)
		case fnetdocument.ForeignKeys[1]: // sub_category1_id
			values[i] = new(sql.NullInt64)
		case fnetdocument.ForeignKeys[2]: // sub_category2_id
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FnetDocument", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FnetDocument fields.
func (fd *FnetDocument) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fnetdocument.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fd.ID = int(value.Int64)
		case fnetdocument.FieldFnetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fnet_id", values[i])
			} else if value.Valid {
				fd.FnetID = int(value.Int64)
			}
		case fnetdocument.FieldAdditionalInformation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field additional_information", values[i])
			} else if value.Valid {
				fd.AdditionalInformation = value.String
			}
		case fnetdocument.FieldCategoryStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field category_str", values[i])
			} else if value.Valid {
				fd.CategoryStr = value.String
			}
		case fnetdocument.FieldDocumentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_status", values[i])
			} else if value.Valid {
				fd.DocumentStatus = value.String
			}
		case fnetdocument.FieldFundDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fund_description", values[i])
			} else if value.Valid {
				fd.FundDescription = value.String
			}
		case fnetdocument.FieldHighPriority:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field high_priority", values[i])
			} else if value.Valid {
				fd.HighPriority = value.Bool
			}
		case fnetdocument.FieldMarketName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field market_name", values[i])
			} else if value.Valid {
				fd.MarketName = value.String
			}
		case fnetdocument.FieldReferenceDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field reference_date", values[i])
			} else if value.Valid {
				fd.ReferenceDate = value.Time
			}
		case fnetdocument.FieldReferenceDateFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_date_format", values[i])
			} else if value.Valid {
				fd.ReferenceDateFormat = value.String
			}
		case fnetdocument.FieldReferenceDateStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_date_str", values[i])
			} else if value.Valid {
				fd.ReferenceDateStr = value.String
			}
		case fnetdocument.FieldReviewed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed", values[i])
			} else if value.Valid {
				fd.Reviewed = value.String
			}
		case fnetdocument.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fd.Status = value.String
			}
		case fnetdocument.FieldStatusDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_description", values[i])
			} else if value.Valid {
				fd.StatusDescription = value.String
			}
		case fnetdocument.FieldSubCategory1Str:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_category1_str", values[i])
			} else if value.Valid {
				fd.SubCategory1Str = value.String
			}
		case fnetdocument.FieldSubCategory2Str:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub_category2_str", values[i])
			} else if value.Valid {
				fd.SubCategory2Str = value.String
			}
		case fnetdocument.FieldSubmissionDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field submission_date", values[i])
			} else if value.Valid {
				fd.SubmissionDate = value.Time
			}
		case fnetdocument.FieldSubmissionDateStr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submission_date_str", values[i])
			} else if value.Valid {
				fd.SubmissionDateStr = value.String
			}
		case fnetdocument.FieldSubmissionMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submission_method", values[i])
			} else if value.Valid {
				fd.SubmissionMethod = value.String
			}
		case fnetdocument.FieldSubmissionMethodDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submission_method_description", values[i])
			} else if value.Valid {
				fd.SubmissionMethodDescription = value.String
			}
		case fnetdocument.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				fd.Version = int(value.Int64)
			}
		case fnetdocument.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field category_id", value)
			} else if value.Valid {
				fd.category_id = new(int)
				*fd.category_id = int(value.Int64)
			}
		case fnetdocument.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sub_category1_id", value)
			} else if value.Valid {
				fd.sub_category1_id = new(int)
				*fd.sub_category1_id = int(value.Int64)
			}
		case fnetdocument.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field sub_category2_id", value)
			} else if value.Valid {
				fd.sub_category2_id = new(int)
				*fd.sub_category2_id = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryCategory queries the "category" edge of the FnetDocument entity.
func (fd *FnetDocument) QueryCategory() *FnetCategoryQuery {
	return (&FnetDocumentClient{config: fd.config}).QueryCategory(fd)
}

// QuerySubCategory1 queries the "sub_category1" edge of the FnetDocument entity.
func (fd *FnetDocument) QuerySubCategory1() *FnetSubCategory1Query {
	return (&FnetDocumentClient{config: fd.config}).QuerySubCategory1(fd)
}

// QuerySubCategory2 queries the "sub_category2" edge of the FnetDocument entity.
func (fd *FnetDocument) QuerySubCategory2() *FnetSubCategory2Query {
	return (&FnetDocumentClient{config: fd.config}).QuerySubCategory2(fd)
}

// Update returns a builder for updating this FnetDocument.
// Note that you need to call FnetDocument.Unwrap() before calling this method if this FnetDocument
// was returned from a transaction, and the transaction was committed or rolled back.
func (fd *FnetDocument) Update() *FnetDocumentUpdateOne {
	return (&FnetDocumentClient{config: fd.config}).UpdateOne(fd)
}

// Unwrap unwraps the FnetDocument entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fd *FnetDocument) Unwrap() *FnetDocument {
	_tx, ok := fd.config.driver.(*txDriver)
	if !ok {
		panic("ent: FnetDocument is not a transactional entity")
	}
	fd.config.driver = _tx.drv
	return fd
}

// String implements the fmt.Stringer.
func (fd *FnetDocument) String() string {
	var builder strings.Builder
	builder.WriteString("FnetDocument(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fd.ID))
	builder.WriteString("fnet_id=")
	builder.WriteString(fmt.Sprintf("%v", fd.FnetID))
	builder.WriteString(", ")
	builder.WriteString("additional_information=")
	builder.WriteString(fd.AdditionalInformation)
	builder.WriteString(", ")
	builder.WriteString("category_str=")
	builder.WriteString(fd.CategoryStr)
	builder.WriteString(", ")
	builder.WriteString("document_status=")
	builder.WriteString(fd.DocumentStatus)
	builder.WriteString(", ")
	builder.WriteString("fund_description=")
	builder.WriteString(fd.FundDescription)
	builder.WriteString(", ")
	builder.WriteString("high_priority=")
	builder.WriteString(fmt.Sprintf("%v", fd.HighPriority))
	builder.WriteString(", ")
	builder.WriteString("market_name=")
	builder.WriteString(fd.MarketName)
	builder.WriteString(", ")
	builder.WriteString("reference_date=")
	builder.WriteString(fd.ReferenceDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("reference_date_format=")
	builder.WriteString(fd.ReferenceDateFormat)
	builder.WriteString(", ")
	builder.WriteString("reference_date_str=")
	builder.WriteString(fd.ReferenceDateStr)
	builder.WriteString(", ")
	builder.WriteString("reviewed=")
	builder.WriteString(fd.Reviewed)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fd.Status)
	builder.WriteString(", ")
	builder.WriteString("status_description=")
	builder.WriteString(fd.StatusDescription)
	builder.WriteString(", ")
	builder.WriteString("sub_category1_str=")
	builder.WriteString(fd.SubCategory1Str)
	builder.WriteString(", ")
	builder.WriteString("sub_category2_str=")
	builder.WriteString(fd.SubCategory2Str)
	builder.WriteString(", ")
	builder.WriteString("submission_date=")
	builder.WriteString(fd.SubmissionDate.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("submission_date_str=")
	builder.WriteString(fd.SubmissionDateStr)
	builder.WriteString(", ")
	builder.WriteString("submission_method=")
	builder.WriteString(fd.SubmissionMethod)
	builder.WriteString(", ")
	builder.WriteString("submission_method_description=")
	builder.WriteString(fd.SubmissionMethodDescription)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", fd.Version))
	builder.WriteByte(')')
	return builder.String()
}

// FnetDocuments is a parsable slice of FnetDocument.
type FnetDocuments []*FnetDocument

func (fd FnetDocuments) config(cfg config) {
	for _i := range fd {
		fd[_i].config = cfg
	}
}
