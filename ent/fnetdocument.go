// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/lenon/gofii/ent/fnetdocument"
)

// FnetDocument is the model entity for the FnetDocument schema.
type FnetDocument struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// FnetID holds the value of the "fnet_id" field.
	FnetID int `json:"fnet_id,omitempty"`
	// AdditionalInformation holds the value of the "additional_information" field.
	AdditionalInformation string `json:"additional_information,omitempty"`
	// DocumentCategory holds the value of the "document_category" field.
	DocumentCategory string `json:"document_category,omitempty"`
	// DocumentStatus holds the value of the "document_status" field.
	DocumentStatus string `json:"document_status,omitempty"`
	// DocumentSubCategory1 holds the value of the "document_sub_category1" field.
	DocumentSubCategory1 string `json:"document_sub_category1,omitempty"`
	// DocumentSubCategory2 holds the value of the "document_sub_category2" field.
	DocumentSubCategory2 string `json:"document_sub_category2,omitempty"`
	// FundDescription holds the value of the "fund_description" field.
	FundDescription string `json:"fund_description,omitempty"`
	// HighPriority holds the value of the "high_priority" field.
	HighPriority bool `json:"high_priority,omitempty"`
	// MarketName holds the value of the "market_name" field.
	MarketName string `json:"market_name,omitempty"`
	// ReferenceDateFormat holds the value of the "reference_date_format" field.
	ReferenceDateFormat string `json:"reference_date_format,omitempty"`
	// ReferenceDate holds the value of the "reference_date" field.
	ReferenceDate string `json:"reference_date,omitempty"`
	// Reviewed holds the value of the "reviewed" field.
	Reviewed string `json:"reviewed,omitempty"`
	// StatusDescription holds the value of the "status_description" field.
	StatusDescription string `json:"status_description,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// SubmissionDate holds the value of the "submission_date" field.
	SubmissionDate string `json:"submission_date,omitempty"`
	// SubmissionMethodDescription holds the value of the "submission_method_description" field.
	SubmissionMethodDescription string `json:"submission_method_description,omitempty"`
	// SubmissionMethod holds the value of the "submission_method" field.
	SubmissionMethod string `json:"submission_method,omitempty"`
	// Version holds the value of the "version" field.
	Version int `json:"version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FnetDocument) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case fnetdocument.FieldHighPriority:
			values[i] = new(sql.NullBool)
		case fnetdocument.FieldID, fnetdocument.FieldFnetID, fnetdocument.FieldVersion:
			values[i] = new(sql.NullInt64)
		case fnetdocument.FieldAdditionalInformation, fnetdocument.FieldDocumentCategory, fnetdocument.FieldDocumentStatus, fnetdocument.FieldDocumentSubCategory1, fnetdocument.FieldDocumentSubCategory2, fnetdocument.FieldFundDescription, fnetdocument.FieldMarketName, fnetdocument.FieldReferenceDateFormat, fnetdocument.FieldReferenceDate, fnetdocument.FieldReviewed, fnetdocument.FieldStatusDescription, fnetdocument.FieldStatus, fnetdocument.FieldSubmissionDate, fnetdocument.FieldSubmissionMethodDescription, fnetdocument.FieldSubmissionMethod:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type FnetDocument", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FnetDocument fields.
func (fd *FnetDocument) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fnetdocument.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fd.ID = int(value.Int64)
		case fnetdocument.FieldFnetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field fnet_id", values[i])
			} else if value.Valid {
				fd.FnetID = int(value.Int64)
			}
		case fnetdocument.FieldAdditionalInformation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field additional_information", values[i])
			} else if value.Valid {
				fd.AdditionalInformation = value.String
			}
		case fnetdocument.FieldDocumentCategory:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_category", values[i])
			} else if value.Valid {
				fd.DocumentCategory = value.String
			}
		case fnetdocument.FieldDocumentStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_status", values[i])
			} else if value.Valid {
				fd.DocumentStatus = value.String
			}
		case fnetdocument.FieldDocumentSubCategory1:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_sub_category1", values[i])
			} else if value.Valid {
				fd.DocumentSubCategory1 = value.String
			}
		case fnetdocument.FieldDocumentSubCategory2:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field document_sub_category2", values[i])
			} else if value.Valid {
				fd.DocumentSubCategory2 = value.String
			}
		case fnetdocument.FieldFundDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field fund_description", values[i])
			} else if value.Valid {
				fd.FundDescription = value.String
			}
		case fnetdocument.FieldHighPriority:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field high_priority", values[i])
			} else if value.Valid {
				fd.HighPriority = value.Bool
			}
		case fnetdocument.FieldMarketName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field market_name", values[i])
			} else if value.Valid {
				fd.MarketName = value.String
			}
		case fnetdocument.FieldReferenceDateFormat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_date_format", values[i])
			} else if value.Valid {
				fd.ReferenceDateFormat = value.String
			}
		case fnetdocument.FieldReferenceDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reference_date", values[i])
			} else if value.Valid {
				fd.ReferenceDate = value.String
			}
		case fnetdocument.FieldReviewed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field reviewed", values[i])
			} else if value.Valid {
				fd.Reviewed = value.String
			}
		case fnetdocument.FieldStatusDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status_description", values[i])
			} else if value.Valid {
				fd.StatusDescription = value.String
			}
		case fnetdocument.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				fd.Status = value.String
			}
		case fnetdocument.FieldSubmissionDate:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submission_date", values[i])
			} else if value.Valid {
				fd.SubmissionDate = value.String
			}
		case fnetdocument.FieldSubmissionMethodDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submission_method_description", values[i])
			} else if value.Valid {
				fd.SubmissionMethodDescription = value.String
			}
		case fnetdocument.FieldSubmissionMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field submission_method", values[i])
			} else if value.Valid {
				fd.SubmissionMethod = value.String
			}
		case fnetdocument.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				fd.Version = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this FnetDocument.
// Note that you need to call FnetDocument.Unwrap() before calling this method if this FnetDocument
// was returned from a transaction, and the transaction was committed or rolled back.
func (fd *FnetDocument) Update() *FnetDocumentUpdateOne {
	return (&FnetDocumentClient{config: fd.config}).UpdateOne(fd)
}

// Unwrap unwraps the FnetDocument entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fd *FnetDocument) Unwrap() *FnetDocument {
	_tx, ok := fd.config.driver.(*txDriver)
	if !ok {
		panic("ent: FnetDocument is not a transactional entity")
	}
	fd.config.driver = _tx.drv
	return fd
}

// String implements the fmt.Stringer.
func (fd *FnetDocument) String() string {
	var builder strings.Builder
	builder.WriteString("FnetDocument(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fd.ID))
	builder.WriteString("fnet_id=")
	builder.WriteString(fmt.Sprintf("%v", fd.FnetID))
	builder.WriteString(", ")
	builder.WriteString("additional_information=")
	builder.WriteString(fd.AdditionalInformation)
	builder.WriteString(", ")
	builder.WriteString("document_category=")
	builder.WriteString(fd.DocumentCategory)
	builder.WriteString(", ")
	builder.WriteString("document_status=")
	builder.WriteString(fd.DocumentStatus)
	builder.WriteString(", ")
	builder.WriteString("document_sub_category1=")
	builder.WriteString(fd.DocumentSubCategory1)
	builder.WriteString(", ")
	builder.WriteString("document_sub_category2=")
	builder.WriteString(fd.DocumentSubCategory2)
	builder.WriteString(", ")
	builder.WriteString("fund_description=")
	builder.WriteString(fd.FundDescription)
	builder.WriteString(", ")
	builder.WriteString("high_priority=")
	builder.WriteString(fmt.Sprintf("%v", fd.HighPriority))
	builder.WriteString(", ")
	builder.WriteString("market_name=")
	builder.WriteString(fd.MarketName)
	builder.WriteString(", ")
	builder.WriteString("reference_date_format=")
	builder.WriteString(fd.ReferenceDateFormat)
	builder.WriteString(", ")
	builder.WriteString("reference_date=")
	builder.WriteString(fd.ReferenceDate)
	builder.WriteString(", ")
	builder.WriteString("reviewed=")
	builder.WriteString(fd.Reviewed)
	builder.WriteString(", ")
	builder.WriteString("status_description=")
	builder.WriteString(fd.StatusDescription)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fd.Status)
	builder.WriteString(", ")
	builder.WriteString("submission_date=")
	builder.WriteString(fd.SubmissionDate)
	builder.WriteString(", ")
	builder.WriteString("submission_method_description=")
	builder.WriteString(fd.SubmissionMethodDescription)
	builder.WriteString(", ")
	builder.WriteString("submission_method=")
	builder.WriteString(fd.SubmissionMethod)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", fd.Version))
	builder.WriteByte(')')
	return builder.String()
}

// FnetDocuments is a parsable slice of FnetDocument.
type FnetDocuments []*FnetDocument

func (fd FnetDocuments) config(cfg config) {
	for _i := range fd {
		fd[_i].config = cfg
	}
}
