// Code generated by ent, DO NOT EDIT.

package fnetdocument

import (
	"entgo.io/ent/dialect/sql"
	"github.com/lenon/gofii/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// FnetID applies equality check predicate on the "fnet_id" field. It's identical to FnetIDEQ.
func FnetID(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFnetID), v))
	})
}

// AdditionalInformation applies equality check predicate on the "additional_information" field. It's identical to AdditionalInformationEQ.
func AdditionalInformation(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditionalInformation), v))
	})
}

// DocumentCategory applies equality check predicate on the "document_category" field. It's identical to DocumentCategoryEQ.
func DocumentCategory(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentCategory), v))
	})
}

// DocumentStatus applies equality check predicate on the "document_status" field. It's identical to DocumentStatusEQ.
func DocumentStatus(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentStatus), v))
	})
}

// DocumentSubCategory1 applies equality check predicate on the "document_sub_category1" field. It's identical to DocumentSubCategory1EQ.
func DocumentSubCategory1(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory2 applies equality check predicate on the "document_sub_category2" field. It's identical to DocumentSubCategory2EQ.
func DocumentSubCategory2(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentSubCategory2), v))
	})
}

// FundDescription applies equality check predicate on the "fund_description" field. It's identical to FundDescriptionEQ.
func FundDescription(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFundDescription), v))
	})
}

// HighPriority applies equality check predicate on the "high_priority" field. It's identical to HighPriorityEQ.
func HighPriority(v bool) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHighPriority), v))
	})
}

// MarketName applies equality check predicate on the "market_name" field. It's identical to MarketNameEQ.
func MarketName(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketName), v))
	})
}

// ReferenceDateFormat applies equality check predicate on the "reference_date_format" field. It's identical to ReferenceDateFormatEQ.
func ReferenceDateFormat(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDate applies equality check predicate on the "reference_date" field. It's identical to ReferenceDateEQ.
func ReferenceDate(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceDate), v))
	})
}

// Reviewed applies equality check predicate on the "reviewed" field. It's identical to ReviewedEQ.
func Reviewed(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewed), v))
	})
}

// StatusDescription applies equality check predicate on the "status_description" field. It's identical to StatusDescriptionEQ.
func StatusDescription(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDescription), v))
	})
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// SubmissionDate applies equality check predicate on the "submission_date" field. It's identical to SubmissionDateEQ.
func SubmissionDate(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionMethodDescription applies equality check predicate on the "submission_method_description" field. It's identical to SubmissionMethodDescriptionEQ.
func SubmissionMethodDescription(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethod applies equality check predicate on the "submission_method" field. It's identical to SubmissionMethodEQ.
func SubmissionMethod(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionMethod), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// FnetIDEQ applies the EQ predicate on the "fnet_id" field.
func FnetIDEQ(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFnetID), v))
	})
}

// FnetIDNEQ applies the NEQ predicate on the "fnet_id" field.
func FnetIDNEQ(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFnetID), v))
	})
}

// FnetIDIn applies the In predicate on the "fnet_id" field.
func FnetIDIn(vs ...int) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFnetID), v...))
	})
}

// FnetIDNotIn applies the NotIn predicate on the "fnet_id" field.
func FnetIDNotIn(vs ...int) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFnetID), v...))
	})
}

// FnetIDGT applies the GT predicate on the "fnet_id" field.
func FnetIDGT(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFnetID), v))
	})
}

// FnetIDGTE applies the GTE predicate on the "fnet_id" field.
func FnetIDGTE(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFnetID), v))
	})
}

// FnetIDLT applies the LT predicate on the "fnet_id" field.
func FnetIDLT(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFnetID), v))
	})
}

// FnetIDLTE applies the LTE predicate on the "fnet_id" field.
func FnetIDLTE(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFnetID), v))
	})
}

// AdditionalInformationEQ applies the EQ predicate on the "additional_information" field.
func AdditionalInformationEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationNEQ applies the NEQ predicate on the "additional_information" field.
func AdditionalInformationNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationIn applies the In predicate on the "additional_information" field.
func AdditionalInformationIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAdditionalInformation), v...))
	})
}

// AdditionalInformationNotIn applies the NotIn predicate on the "additional_information" field.
func AdditionalInformationNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAdditionalInformation), v...))
	})
}

// AdditionalInformationGT applies the GT predicate on the "additional_information" field.
func AdditionalInformationGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationGTE applies the GTE predicate on the "additional_information" field.
func AdditionalInformationGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationLT applies the LT predicate on the "additional_information" field.
func AdditionalInformationLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationLTE applies the LTE predicate on the "additional_information" field.
func AdditionalInformationLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationContains applies the Contains predicate on the "additional_information" field.
func AdditionalInformationContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationHasPrefix applies the HasPrefix predicate on the "additional_information" field.
func AdditionalInformationHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationHasSuffix applies the HasSuffix predicate on the "additional_information" field.
func AdditionalInformationHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationIsNil applies the IsNil predicate on the "additional_information" field.
func AdditionalInformationIsNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAdditionalInformation)))
	})
}

// AdditionalInformationNotNil applies the NotNil predicate on the "additional_information" field.
func AdditionalInformationNotNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAdditionalInformation)))
	})
}

// AdditionalInformationEqualFold applies the EqualFold predicate on the "additional_information" field.
func AdditionalInformationEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAdditionalInformation), v))
	})
}

// AdditionalInformationContainsFold applies the ContainsFold predicate on the "additional_information" field.
func AdditionalInformationContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAdditionalInformation), v))
	})
}

// DocumentCategoryEQ applies the EQ predicate on the "document_category" field.
func DocumentCategoryEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryNEQ applies the NEQ predicate on the "document_category" field.
func DocumentCategoryNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryIn applies the In predicate on the "document_category" field.
func DocumentCategoryIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDocumentCategory), v...))
	})
}

// DocumentCategoryNotIn applies the NotIn predicate on the "document_category" field.
func DocumentCategoryNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDocumentCategory), v...))
	})
}

// DocumentCategoryGT applies the GT predicate on the "document_category" field.
func DocumentCategoryGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryGTE applies the GTE predicate on the "document_category" field.
func DocumentCategoryGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryLT applies the LT predicate on the "document_category" field.
func DocumentCategoryLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryLTE applies the LTE predicate on the "document_category" field.
func DocumentCategoryLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryContains applies the Contains predicate on the "document_category" field.
func DocumentCategoryContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryHasPrefix applies the HasPrefix predicate on the "document_category" field.
func DocumentCategoryHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryHasSuffix applies the HasSuffix predicate on the "document_category" field.
func DocumentCategoryHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryEqualFold applies the EqualFold predicate on the "document_category" field.
func DocumentCategoryEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDocumentCategory), v))
	})
}

// DocumentCategoryContainsFold applies the ContainsFold predicate on the "document_category" field.
func DocumentCategoryContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDocumentCategory), v))
	})
}

// DocumentStatusEQ applies the EQ predicate on the "document_status" field.
func DocumentStatusEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusNEQ applies the NEQ predicate on the "document_status" field.
func DocumentStatusNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusIn applies the In predicate on the "document_status" field.
func DocumentStatusIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDocumentStatus), v...))
	})
}

// DocumentStatusNotIn applies the NotIn predicate on the "document_status" field.
func DocumentStatusNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDocumentStatus), v...))
	})
}

// DocumentStatusGT applies the GT predicate on the "document_status" field.
func DocumentStatusGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusGTE applies the GTE predicate on the "document_status" field.
func DocumentStatusGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusLT applies the LT predicate on the "document_status" field.
func DocumentStatusLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusLTE applies the LTE predicate on the "document_status" field.
func DocumentStatusLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusContains applies the Contains predicate on the "document_status" field.
func DocumentStatusContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusHasPrefix applies the HasPrefix predicate on the "document_status" field.
func DocumentStatusHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusHasSuffix applies the HasSuffix predicate on the "document_status" field.
func DocumentStatusHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusEqualFold applies the EqualFold predicate on the "document_status" field.
func DocumentStatusEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDocumentStatus), v))
	})
}

// DocumentStatusContainsFold applies the ContainsFold predicate on the "document_status" field.
func DocumentStatusContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDocumentStatus), v))
	})
}

// DocumentSubCategory1EQ applies the EQ predicate on the "document_sub_category1" field.
func DocumentSubCategory1EQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1NEQ applies the NEQ predicate on the "document_sub_category1" field.
func DocumentSubCategory1NEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1In applies the In predicate on the "document_sub_category1" field.
func DocumentSubCategory1In(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDocumentSubCategory1), v...))
	})
}

// DocumentSubCategory1NotIn applies the NotIn predicate on the "document_sub_category1" field.
func DocumentSubCategory1NotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDocumentSubCategory1), v...))
	})
}

// DocumentSubCategory1GT applies the GT predicate on the "document_sub_category1" field.
func DocumentSubCategory1GT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1GTE applies the GTE predicate on the "document_sub_category1" field.
func DocumentSubCategory1GTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1LT applies the LT predicate on the "document_sub_category1" field.
func DocumentSubCategory1LT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1LTE applies the LTE predicate on the "document_sub_category1" field.
func DocumentSubCategory1LTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1Contains applies the Contains predicate on the "document_sub_category1" field.
func DocumentSubCategory1Contains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1HasPrefix applies the HasPrefix predicate on the "document_sub_category1" field.
func DocumentSubCategory1HasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1HasSuffix applies the HasSuffix predicate on the "document_sub_category1" field.
func DocumentSubCategory1HasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1IsNil applies the IsNil predicate on the "document_sub_category1" field.
func DocumentSubCategory1IsNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDocumentSubCategory1)))
	})
}

// DocumentSubCategory1NotNil applies the NotNil predicate on the "document_sub_category1" field.
func DocumentSubCategory1NotNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDocumentSubCategory1)))
	})
}

// DocumentSubCategory1EqualFold applies the EqualFold predicate on the "document_sub_category1" field.
func DocumentSubCategory1EqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory1ContainsFold applies the ContainsFold predicate on the "document_sub_category1" field.
func DocumentSubCategory1ContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDocumentSubCategory1), v))
	})
}

// DocumentSubCategory2EQ applies the EQ predicate on the "document_sub_category2" field.
func DocumentSubCategory2EQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2NEQ applies the NEQ predicate on the "document_sub_category2" field.
func DocumentSubCategory2NEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2In applies the In predicate on the "document_sub_category2" field.
func DocumentSubCategory2In(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDocumentSubCategory2), v...))
	})
}

// DocumentSubCategory2NotIn applies the NotIn predicate on the "document_sub_category2" field.
func DocumentSubCategory2NotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDocumentSubCategory2), v...))
	})
}

// DocumentSubCategory2GT applies the GT predicate on the "document_sub_category2" field.
func DocumentSubCategory2GT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2GTE applies the GTE predicate on the "document_sub_category2" field.
func DocumentSubCategory2GTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2LT applies the LT predicate on the "document_sub_category2" field.
func DocumentSubCategory2LT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2LTE applies the LTE predicate on the "document_sub_category2" field.
func DocumentSubCategory2LTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2Contains applies the Contains predicate on the "document_sub_category2" field.
func DocumentSubCategory2Contains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2HasPrefix applies the HasPrefix predicate on the "document_sub_category2" field.
func DocumentSubCategory2HasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2HasSuffix applies the HasSuffix predicate on the "document_sub_category2" field.
func DocumentSubCategory2HasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2IsNil applies the IsNil predicate on the "document_sub_category2" field.
func DocumentSubCategory2IsNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDocumentSubCategory2)))
	})
}

// DocumentSubCategory2NotNil applies the NotNil predicate on the "document_sub_category2" field.
func DocumentSubCategory2NotNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDocumentSubCategory2)))
	})
}

// DocumentSubCategory2EqualFold applies the EqualFold predicate on the "document_sub_category2" field.
func DocumentSubCategory2EqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDocumentSubCategory2), v))
	})
}

// DocumentSubCategory2ContainsFold applies the ContainsFold predicate on the "document_sub_category2" field.
func DocumentSubCategory2ContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDocumentSubCategory2), v))
	})
}

// FundDescriptionEQ applies the EQ predicate on the "fund_description" field.
func FundDescriptionEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionNEQ applies the NEQ predicate on the "fund_description" field.
func FundDescriptionNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionIn applies the In predicate on the "fund_description" field.
func FundDescriptionIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldFundDescription), v...))
	})
}

// FundDescriptionNotIn applies the NotIn predicate on the "fund_description" field.
func FundDescriptionNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldFundDescription), v...))
	})
}

// FundDescriptionGT applies the GT predicate on the "fund_description" field.
func FundDescriptionGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionGTE applies the GTE predicate on the "fund_description" field.
func FundDescriptionGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionLT applies the LT predicate on the "fund_description" field.
func FundDescriptionLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionLTE applies the LTE predicate on the "fund_description" field.
func FundDescriptionLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionContains applies the Contains predicate on the "fund_description" field.
func FundDescriptionContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionHasPrefix applies the HasPrefix predicate on the "fund_description" field.
func FundDescriptionHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionHasSuffix applies the HasSuffix predicate on the "fund_description" field.
func FundDescriptionHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionEqualFold applies the EqualFold predicate on the "fund_description" field.
func FundDescriptionEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFundDescription), v))
	})
}

// FundDescriptionContainsFold applies the ContainsFold predicate on the "fund_description" field.
func FundDescriptionContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFundDescription), v))
	})
}

// HighPriorityEQ applies the EQ predicate on the "high_priority" field.
func HighPriorityEQ(v bool) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHighPriority), v))
	})
}

// HighPriorityNEQ applies the NEQ predicate on the "high_priority" field.
func HighPriorityNEQ(v bool) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHighPriority), v))
	})
}

// MarketNameEQ applies the EQ predicate on the "market_name" field.
func MarketNameEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMarketName), v))
	})
}

// MarketNameNEQ applies the NEQ predicate on the "market_name" field.
func MarketNameNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMarketName), v))
	})
}

// MarketNameIn applies the In predicate on the "market_name" field.
func MarketNameIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMarketName), v...))
	})
}

// MarketNameNotIn applies the NotIn predicate on the "market_name" field.
func MarketNameNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMarketName), v...))
	})
}

// MarketNameGT applies the GT predicate on the "market_name" field.
func MarketNameGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMarketName), v))
	})
}

// MarketNameGTE applies the GTE predicate on the "market_name" field.
func MarketNameGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMarketName), v))
	})
}

// MarketNameLT applies the LT predicate on the "market_name" field.
func MarketNameLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMarketName), v))
	})
}

// MarketNameLTE applies the LTE predicate on the "market_name" field.
func MarketNameLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMarketName), v))
	})
}

// MarketNameContains applies the Contains predicate on the "market_name" field.
func MarketNameContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMarketName), v))
	})
}

// MarketNameHasPrefix applies the HasPrefix predicate on the "market_name" field.
func MarketNameHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMarketName), v))
	})
}

// MarketNameHasSuffix applies the HasSuffix predicate on the "market_name" field.
func MarketNameHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMarketName), v))
	})
}

// MarketNameIsNil applies the IsNil predicate on the "market_name" field.
func MarketNameIsNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMarketName)))
	})
}

// MarketNameNotNil applies the NotNil predicate on the "market_name" field.
func MarketNameNotNil() predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMarketName)))
	})
}

// MarketNameEqualFold applies the EqualFold predicate on the "market_name" field.
func MarketNameEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMarketName), v))
	})
}

// MarketNameContainsFold applies the ContainsFold predicate on the "market_name" field.
func MarketNameContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMarketName), v))
	})
}

// ReferenceDateFormatEQ applies the EQ predicate on the "reference_date_format" field.
func ReferenceDateFormatEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatNEQ applies the NEQ predicate on the "reference_date_format" field.
func ReferenceDateFormatNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatIn applies the In predicate on the "reference_date_format" field.
func ReferenceDateFormatIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReferenceDateFormat), v...))
	})
}

// ReferenceDateFormatNotIn applies the NotIn predicate on the "reference_date_format" field.
func ReferenceDateFormatNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReferenceDateFormat), v...))
	})
}

// ReferenceDateFormatGT applies the GT predicate on the "reference_date_format" field.
func ReferenceDateFormatGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatGTE applies the GTE predicate on the "reference_date_format" field.
func ReferenceDateFormatGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatLT applies the LT predicate on the "reference_date_format" field.
func ReferenceDateFormatLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatLTE applies the LTE predicate on the "reference_date_format" field.
func ReferenceDateFormatLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatContains applies the Contains predicate on the "reference_date_format" field.
func ReferenceDateFormatContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatHasPrefix applies the HasPrefix predicate on the "reference_date_format" field.
func ReferenceDateFormatHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatHasSuffix applies the HasSuffix predicate on the "reference_date_format" field.
func ReferenceDateFormatHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatEqualFold applies the EqualFold predicate on the "reference_date_format" field.
func ReferenceDateFormatEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateFormatContainsFold applies the ContainsFold predicate on the "reference_date_format" field.
func ReferenceDateFormatContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferenceDateFormat), v))
	})
}

// ReferenceDateEQ applies the EQ predicate on the "reference_date" field.
func ReferenceDateEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateNEQ applies the NEQ predicate on the "reference_date" field.
func ReferenceDateNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateIn applies the In predicate on the "reference_date" field.
func ReferenceDateIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReferenceDate), v...))
	})
}

// ReferenceDateNotIn applies the NotIn predicate on the "reference_date" field.
func ReferenceDateNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReferenceDate), v...))
	})
}

// ReferenceDateGT applies the GT predicate on the "reference_date" field.
func ReferenceDateGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateGTE applies the GTE predicate on the "reference_date" field.
func ReferenceDateGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateLT applies the LT predicate on the "reference_date" field.
func ReferenceDateLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateLTE applies the LTE predicate on the "reference_date" field.
func ReferenceDateLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateContains applies the Contains predicate on the "reference_date" field.
func ReferenceDateContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateHasPrefix applies the HasPrefix predicate on the "reference_date" field.
func ReferenceDateHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateHasSuffix applies the HasSuffix predicate on the "reference_date" field.
func ReferenceDateHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateEqualFold applies the EqualFold predicate on the "reference_date" field.
func ReferenceDateEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReferenceDate), v))
	})
}

// ReferenceDateContainsFold applies the ContainsFold predicate on the "reference_date" field.
func ReferenceDateContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReferenceDate), v))
	})
}

// ReviewedEQ applies the EQ predicate on the "reviewed" field.
func ReviewedEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldReviewed), v))
	})
}

// ReviewedNEQ applies the NEQ predicate on the "reviewed" field.
func ReviewedNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldReviewed), v))
	})
}

// ReviewedIn applies the In predicate on the "reviewed" field.
func ReviewedIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldReviewed), v...))
	})
}

// ReviewedNotIn applies the NotIn predicate on the "reviewed" field.
func ReviewedNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldReviewed), v...))
	})
}

// ReviewedGT applies the GT predicate on the "reviewed" field.
func ReviewedGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldReviewed), v))
	})
}

// ReviewedGTE applies the GTE predicate on the "reviewed" field.
func ReviewedGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldReviewed), v))
	})
}

// ReviewedLT applies the LT predicate on the "reviewed" field.
func ReviewedLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldReviewed), v))
	})
}

// ReviewedLTE applies the LTE predicate on the "reviewed" field.
func ReviewedLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldReviewed), v))
	})
}

// ReviewedContains applies the Contains predicate on the "reviewed" field.
func ReviewedContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldReviewed), v))
	})
}

// ReviewedHasPrefix applies the HasPrefix predicate on the "reviewed" field.
func ReviewedHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldReviewed), v))
	})
}

// ReviewedHasSuffix applies the HasSuffix predicate on the "reviewed" field.
func ReviewedHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldReviewed), v))
	})
}

// ReviewedEqualFold applies the EqualFold predicate on the "reviewed" field.
func ReviewedEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldReviewed), v))
	})
}

// ReviewedContainsFold applies the ContainsFold predicate on the "reviewed" field.
func ReviewedContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldReviewed), v))
	})
}

// StatusDescriptionEQ applies the EQ predicate on the "status_description" field.
func StatusDescriptionEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionNEQ applies the NEQ predicate on the "status_description" field.
func StatusDescriptionNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionIn applies the In predicate on the "status_description" field.
func StatusDescriptionIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatusDescription), v...))
	})
}

// StatusDescriptionNotIn applies the NotIn predicate on the "status_description" field.
func StatusDescriptionNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatusDescription), v...))
	})
}

// StatusDescriptionGT applies the GT predicate on the "status_description" field.
func StatusDescriptionGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionGTE applies the GTE predicate on the "status_description" field.
func StatusDescriptionGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionLT applies the LT predicate on the "status_description" field.
func StatusDescriptionLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionLTE applies the LTE predicate on the "status_description" field.
func StatusDescriptionLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionContains applies the Contains predicate on the "status_description" field.
func StatusDescriptionContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionHasPrefix applies the HasPrefix predicate on the "status_description" field.
func StatusDescriptionHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionHasSuffix applies the HasSuffix predicate on the "status_description" field.
func StatusDescriptionHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionEqualFold applies the EqualFold predicate on the "status_description" field.
func StatusDescriptionEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatusDescription), v))
	})
}

// StatusDescriptionContainsFold applies the ContainsFold predicate on the "status_description" field.
func StatusDescriptionContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatusDescription), v))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStatus), v))
	})
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStatus), v))
	})
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStatus), v))
	})
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStatus), v))
	})
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStatus), v))
	})
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStatus), v))
	})
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStatus), v))
	})
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStatus), v))
	})
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStatus), v))
	})
}

// SubmissionDateEQ applies the EQ predicate on the "submission_date" field.
func SubmissionDateEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateNEQ applies the NEQ predicate on the "submission_date" field.
func SubmissionDateNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateIn applies the In predicate on the "submission_date" field.
func SubmissionDateIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubmissionDate), v...))
	})
}

// SubmissionDateNotIn applies the NotIn predicate on the "submission_date" field.
func SubmissionDateNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubmissionDate), v...))
	})
}

// SubmissionDateGT applies the GT predicate on the "submission_date" field.
func SubmissionDateGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateGTE applies the GTE predicate on the "submission_date" field.
func SubmissionDateGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateLT applies the LT predicate on the "submission_date" field.
func SubmissionDateLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateLTE applies the LTE predicate on the "submission_date" field.
func SubmissionDateLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateContains applies the Contains predicate on the "submission_date" field.
func SubmissionDateContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateHasPrefix applies the HasPrefix predicate on the "submission_date" field.
func SubmissionDateHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateHasSuffix applies the HasSuffix predicate on the "submission_date" field.
func SubmissionDateHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateEqualFold applies the EqualFold predicate on the "submission_date" field.
func SubmissionDateEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionDateContainsFold applies the ContainsFold predicate on the "submission_date" field.
func SubmissionDateContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubmissionDate), v))
	})
}

// SubmissionMethodDescriptionEQ applies the EQ predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionNEQ applies the NEQ predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionIn applies the In predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubmissionMethodDescription), v...))
	})
}

// SubmissionMethodDescriptionNotIn applies the NotIn predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubmissionMethodDescription), v...))
	})
}

// SubmissionMethodDescriptionGT applies the GT predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionGTE applies the GTE predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionLT applies the LT predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionLTE applies the LTE predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionContains applies the Contains predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionHasPrefix applies the HasPrefix predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionHasSuffix applies the HasSuffix predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionEqualFold applies the EqualFold predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodDescriptionContainsFold applies the ContainsFold predicate on the "submission_method_description" field.
func SubmissionMethodDescriptionContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubmissionMethodDescription), v))
	})
}

// SubmissionMethodEQ applies the EQ predicate on the "submission_method" field.
func SubmissionMethodEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodNEQ applies the NEQ predicate on the "submission_method" field.
func SubmissionMethodNEQ(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodIn applies the In predicate on the "submission_method" field.
func SubmissionMethodIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSubmissionMethod), v...))
	})
}

// SubmissionMethodNotIn applies the NotIn predicate on the "submission_method" field.
func SubmissionMethodNotIn(vs ...string) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSubmissionMethod), v...))
	})
}

// SubmissionMethodGT applies the GT predicate on the "submission_method" field.
func SubmissionMethodGT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodGTE applies the GTE predicate on the "submission_method" field.
func SubmissionMethodGTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodLT applies the LT predicate on the "submission_method" field.
func SubmissionMethodLT(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodLTE applies the LTE predicate on the "submission_method" field.
func SubmissionMethodLTE(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodContains applies the Contains predicate on the "submission_method" field.
func SubmissionMethodContains(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodHasPrefix applies the HasPrefix predicate on the "submission_method" field.
func SubmissionMethodHasPrefix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodHasSuffix applies the HasSuffix predicate on the "submission_method" field.
func SubmissionMethodHasSuffix(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodEqualFold applies the EqualFold predicate on the "submission_method" field.
func SubmissionMethodEqualFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubmissionMethod), v))
	})
}

// SubmissionMethodContainsFold applies the ContainsFold predicate on the "submission_method" field.
func SubmissionMethodContainsFold(v string) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubmissionMethod), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.FnetDocument {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.FnetDocument) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.FnetDocument) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.FnetDocument) predicate.FnetDocument {
	return predicate.FnetDocument(func(s *sql.Selector) {
		p(s.Not())
	})
}
