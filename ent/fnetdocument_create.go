// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lenon/gofii/ent/fnetdocument"
)

// FnetDocumentCreate is the builder for creating a FnetDocument entity.
type FnetDocumentCreate struct {
	config
	mutation *FnetDocumentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetFnetID sets the "fnet_id" field.
func (fdc *FnetDocumentCreate) SetFnetID(i int) *FnetDocumentCreate {
	fdc.mutation.SetFnetID(i)
	return fdc
}

// SetAdditionalInformation sets the "additional_information" field.
func (fdc *FnetDocumentCreate) SetAdditionalInformation(s string) *FnetDocumentCreate {
	fdc.mutation.SetAdditionalInformation(s)
	return fdc
}

// SetNillableAdditionalInformation sets the "additional_information" field if the given value is not nil.
func (fdc *FnetDocumentCreate) SetNillableAdditionalInformation(s *string) *FnetDocumentCreate {
	if s != nil {
		fdc.SetAdditionalInformation(*s)
	}
	return fdc
}

// SetDocumentCategory sets the "document_category" field.
func (fdc *FnetDocumentCreate) SetDocumentCategory(s string) *FnetDocumentCreate {
	fdc.mutation.SetDocumentCategory(s)
	return fdc
}

// SetDocumentStatus sets the "document_status" field.
func (fdc *FnetDocumentCreate) SetDocumentStatus(s string) *FnetDocumentCreate {
	fdc.mutation.SetDocumentStatus(s)
	return fdc
}

// SetDocumentSubCategory1 sets the "document_sub_category1" field.
func (fdc *FnetDocumentCreate) SetDocumentSubCategory1(s string) *FnetDocumentCreate {
	fdc.mutation.SetDocumentSubCategory1(s)
	return fdc
}

// SetNillableDocumentSubCategory1 sets the "document_sub_category1" field if the given value is not nil.
func (fdc *FnetDocumentCreate) SetNillableDocumentSubCategory1(s *string) *FnetDocumentCreate {
	if s != nil {
		fdc.SetDocumentSubCategory1(*s)
	}
	return fdc
}

// SetDocumentSubCategory2 sets the "document_sub_category2" field.
func (fdc *FnetDocumentCreate) SetDocumentSubCategory2(s string) *FnetDocumentCreate {
	fdc.mutation.SetDocumentSubCategory2(s)
	return fdc
}

// SetNillableDocumentSubCategory2 sets the "document_sub_category2" field if the given value is not nil.
func (fdc *FnetDocumentCreate) SetNillableDocumentSubCategory2(s *string) *FnetDocumentCreate {
	if s != nil {
		fdc.SetDocumentSubCategory2(*s)
	}
	return fdc
}

// SetFundDescription sets the "fund_description" field.
func (fdc *FnetDocumentCreate) SetFundDescription(s string) *FnetDocumentCreate {
	fdc.mutation.SetFundDescription(s)
	return fdc
}

// SetHighPriority sets the "high_priority" field.
func (fdc *FnetDocumentCreate) SetHighPriority(b bool) *FnetDocumentCreate {
	fdc.mutation.SetHighPriority(b)
	return fdc
}

// SetMarketName sets the "market_name" field.
func (fdc *FnetDocumentCreate) SetMarketName(s string) *FnetDocumentCreate {
	fdc.mutation.SetMarketName(s)
	return fdc
}

// SetNillableMarketName sets the "market_name" field if the given value is not nil.
func (fdc *FnetDocumentCreate) SetNillableMarketName(s *string) *FnetDocumentCreate {
	if s != nil {
		fdc.SetMarketName(*s)
	}
	return fdc
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (fdc *FnetDocumentCreate) SetReferenceDateFormat(s string) *FnetDocumentCreate {
	fdc.mutation.SetReferenceDateFormat(s)
	return fdc
}

// SetReferenceDate sets the "reference_date" field.
func (fdc *FnetDocumentCreate) SetReferenceDate(s string) *FnetDocumentCreate {
	fdc.mutation.SetReferenceDate(s)
	return fdc
}

// SetReviewed sets the "reviewed" field.
func (fdc *FnetDocumentCreate) SetReviewed(s string) *FnetDocumentCreate {
	fdc.mutation.SetReviewed(s)
	return fdc
}

// SetStatusDescription sets the "status_description" field.
func (fdc *FnetDocumentCreate) SetStatusDescription(s string) *FnetDocumentCreate {
	fdc.mutation.SetStatusDescription(s)
	return fdc
}

// SetStatus sets the "status" field.
func (fdc *FnetDocumentCreate) SetStatus(s string) *FnetDocumentCreate {
	fdc.mutation.SetStatus(s)
	return fdc
}

// SetSubmissionDate sets the "submission_date" field.
func (fdc *FnetDocumentCreate) SetSubmissionDate(s string) *FnetDocumentCreate {
	fdc.mutation.SetSubmissionDate(s)
	return fdc
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (fdc *FnetDocumentCreate) SetSubmissionMethodDescription(s string) *FnetDocumentCreate {
	fdc.mutation.SetSubmissionMethodDescription(s)
	return fdc
}

// SetSubmissionMethod sets the "submission_method" field.
func (fdc *FnetDocumentCreate) SetSubmissionMethod(s string) *FnetDocumentCreate {
	fdc.mutation.SetSubmissionMethod(s)
	return fdc
}

// SetVersion sets the "version" field.
func (fdc *FnetDocumentCreate) SetVersion(i int) *FnetDocumentCreate {
	fdc.mutation.SetVersion(i)
	return fdc
}

// Mutation returns the FnetDocumentMutation object of the builder.
func (fdc *FnetDocumentCreate) Mutation() *FnetDocumentMutation {
	return fdc.mutation
}

// Save creates the FnetDocument in the database.
func (fdc *FnetDocumentCreate) Save(ctx context.Context) (*FnetDocument, error) {
	var (
		err  error
		node *FnetDocument
	)
	if len(fdc.hooks) == 0 {
		if err = fdc.check(); err != nil {
			return nil, err
		}
		node, err = fdc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FnetDocumentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fdc.check(); err != nil {
				return nil, err
			}
			fdc.mutation = mutation
			if node, err = fdc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(fdc.hooks) - 1; i >= 0; i-- {
			if fdc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fdc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fdc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FnetDocument)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FnetDocumentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fdc *FnetDocumentCreate) SaveX(ctx context.Context) *FnetDocument {
	v, err := fdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdc *FnetDocumentCreate) Exec(ctx context.Context) error {
	_, err := fdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdc *FnetDocumentCreate) ExecX(ctx context.Context) {
	if err := fdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdc *FnetDocumentCreate) check() error {
	if _, ok := fdc.mutation.FnetID(); !ok {
		return &ValidationError{Name: "fnet_id", err: errors.New(`ent: missing required field "FnetDocument.fnet_id"`)}
	}
	if v, ok := fdc.mutation.FnetID(); ok {
		if err := fnetdocument.FnetIDValidator(v); err != nil {
			return &ValidationError{Name: "fnet_id", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.fnet_id": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.DocumentCategory(); !ok {
		return &ValidationError{Name: "document_category", err: errors.New(`ent: missing required field "FnetDocument.document_category"`)}
	}
	if v, ok := fdc.mutation.DocumentCategory(); ok {
		if err := fnetdocument.DocumentCategoryValidator(v); err != nil {
			return &ValidationError{Name: "document_category", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.document_category": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.DocumentStatus(); !ok {
		return &ValidationError{Name: "document_status", err: errors.New(`ent: missing required field "FnetDocument.document_status"`)}
	}
	if v, ok := fdc.mutation.DocumentStatus(); ok {
		if err := fnetdocument.DocumentStatusValidator(v); err != nil {
			return &ValidationError{Name: "document_status", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.document_status": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.FundDescription(); !ok {
		return &ValidationError{Name: "fund_description", err: errors.New(`ent: missing required field "FnetDocument.fund_description"`)}
	}
	if v, ok := fdc.mutation.FundDescription(); ok {
		if err := fnetdocument.FundDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "fund_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.fund_description": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.HighPriority(); !ok {
		return &ValidationError{Name: "high_priority", err: errors.New(`ent: missing required field "FnetDocument.high_priority"`)}
	}
	if _, ok := fdc.mutation.ReferenceDateFormat(); !ok {
		return &ValidationError{Name: "reference_date_format", err: errors.New(`ent: missing required field "FnetDocument.reference_date_format"`)}
	}
	if v, ok := fdc.mutation.ReferenceDateFormat(); ok {
		if err := fnetdocument.ReferenceDateFormatValidator(v); err != nil {
			return &ValidationError{Name: "reference_date_format", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reference_date_format": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.ReferenceDate(); !ok {
		return &ValidationError{Name: "reference_date", err: errors.New(`ent: missing required field "FnetDocument.reference_date"`)}
	}
	if v, ok := fdc.mutation.ReferenceDate(); ok {
		if err := fnetdocument.ReferenceDateValidator(v); err != nil {
			return &ValidationError{Name: "reference_date", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reference_date": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.Reviewed(); !ok {
		return &ValidationError{Name: "reviewed", err: errors.New(`ent: missing required field "FnetDocument.reviewed"`)}
	}
	if v, ok := fdc.mutation.Reviewed(); ok {
		if err := fnetdocument.ReviewedValidator(v); err != nil {
			return &ValidationError{Name: "reviewed", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reviewed": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.StatusDescription(); !ok {
		return &ValidationError{Name: "status_description", err: errors.New(`ent: missing required field "FnetDocument.status_description"`)}
	}
	if v, ok := fdc.mutation.StatusDescription(); ok {
		if err := fnetdocument.StatusDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "status_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.status_description": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "FnetDocument.status"`)}
	}
	if v, ok := fdc.mutation.Status(); ok {
		if err := fnetdocument.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.status": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.SubmissionDate(); !ok {
		return &ValidationError{Name: "submission_date", err: errors.New(`ent: missing required field "FnetDocument.submission_date"`)}
	}
	if v, ok := fdc.mutation.SubmissionDate(); ok {
		if err := fnetdocument.SubmissionDateValidator(v); err != nil {
			return &ValidationError{Name: "submission_date", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_date": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.SubmissionMethodDescription(); !ok {
		return &ValidationError{Name: "submission_method_description", err: errors.New(`ent: missing required field "FnetDocument.submission_method_description"`)}
	}
	if v, ok := fdc.mutation.SubmissionMethodDescription(); ok {
		if err := fnetdocument.SubmissionMethodDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "submission_method_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_method_description": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.SubmissionMethod(); !ok {
		return &ValidationError{Name: "submission_method", err: errors.New(`ent: missing required field "FnetDocument.submission_method"`)}
	}
	if v, ok := fdc.mutation.SubmissionMethod(); ok {
		if err := fnetdocument.SubmissionMethodValidator(v); err != nil {
			return &ValidationError{Name: "submission_method", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_method": %w`, err)}
		}
	}
	if _, ok := fdc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "FnetDocument.version"`)}
	}
	if v, ok := fdc.mutation.Version(); ok {
		if err := fnetdocument.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.version": %w`, err)}
		}
	}
	return nil
}

func (fdc *FnetDocumentCreate) sqlSave(ctx context.Context) (*FnetDocument, error) {
	_node, _spec := fdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (fdc *FnetDocumentCreate) createSpec() (*FnetDocument, *sqlgraph.CreateSpec) {
	var (
		_node = &FnetDocument{config: fdc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: fnetdocument.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fnetdocument.FieldID,
			},
		}
	)
	_spec.OnConflict = fdc.conflict
	if value, ok := fdc.mutation.FnetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fnetdocument.FieldFnetID,
		})
		_node.FnetID = value
	}
	if value, ok := fdc.mutation.AdditionalInformation(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldAdditionalInformation,
		})
		_node.AdditionalInformation = value
	}
	if value, ok := fdc.mutation.DocumentCategory(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentCategory,
		})
		_node.DocumentCategory = value
	}
	if value, ok := fdc.mutation.DocumentStatus(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentStatus,
		})
		_node.DocumentStatus = value
	}
	if value, ok := fdc.mutation.DocumentSubCategory1(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentSubCategory1,
		})
		_node.DocumentSubCategory1 = value
	}
	if value, ok := fdc.mutation.DocumentSubCategory2(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentSubCategory2,
		})
		_node.DocumentSubCategory2 = value
	}
	if value, ok := fdc.mutation.FundDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldFundDescription,
		})
		_node.FundDescription = value
	}
	if value, ok := fdc.mutation.HighPriority(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fnetdocument.FieldHighPriority,
		})
		_node.HighPriority = value
	}
	if value, ok := fdc.mutation.MarketName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldMarketName,
		})
		_node.MarketName = value
	}
	if value, ok := fdc.mutation.ReferenceDateFormat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReferenceDateFormat,
		})
		_node.ReferenceDateFormat = value
	}
	if value, ok := fdc.mutation.ReferenceDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReferenceDate,
		})
		_node.ReferenceDate = value
	}
	if value, ok := fdc.mutation.Reviewed(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReviewed,
		})
		_node.Reviewed = value
	}
	if value, ok := fdc.mutation.StatusDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldStatusDescription,
		})
		_node.StatusDescription = value
	}
	if value, ok := fdc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := fdc.mutation.SubmissionDate(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionDate,
		})
		_node.SubmissionDate = value
	}
	if value, ok := fdc.mutation.SubmissionMethodDescription(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionMethodDescription,
		})
		_node.SubmissionMethodDescription = value
	}
	if value, ok := fdc.mutation.SubmissionMethod(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionMethod,
		})
		_node.SubmissionMethod = value
	}
	if value, ok := fdc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fnetdocument.FieldVersion,
		})
		_node.Version = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FnetDocument.Create().
//		SetFnetID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FnetDocumentUpsert) {
//			SetFnetID(v+v).
//		}).
//		Exec(ctx)
func (fdc *FnetDocumentCreate) OnConflict(opts ...sql.ConflictOption) *FnetDocumentUpsertOne {
	fdc.conflict = opts
	return &FnetDocumentUpsertOne{
		create: fdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FnetDocument.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fdc *FnetDocumentCreate) OnConflictColumns(columns ...string) *FnetDocumentUpsertOne {
	fdc.conflict = append(fdc.conflict, sql.ConflictColumns(columns...))
	return &FnetDocumentUpsertOne{
		create: fdc,
	}
}

type (
	// FnetDocumentUpsertOne is the builder for "upsert"-ing
	//  one FnetDocument node.
	FnetDocumentUpsertOne struct {
		create *FnetDocumentCreate
	}

	// FnetDocumentUpsert is the "OnConflict" setter.
	FnetDocumentUpsert struct {
		*sql.UpdateSet
	}
)

// SetFnetID sets the "fnet_id" field.
func (u *FnetDocumentUpsert) SetFnetID(v int) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldFnetID, v)
	return u
}

// UpdateFnetID sets the "fnet_id" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateFnetID() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldFnetID)
	return u
}

// AddFnetID adds v to the "fnet_id" field.
func (u *FnetDocumentUpsert) AddFnetID(v int) *FnetDocumentUpsert {
	u.Add(fnetdocument.FieldFnetID, v)
	return u
}

// SetAdditionalInformation sets the "additional_information" field.
func (u *FnetDocumentUpsert) SetAdditionalInformation(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldAdditionalInformation, v)
	return u
}

// UpdateAdditionalInformation sets the "additional_information" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateAdditionalInformation() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldAdditionalInformation)
	return u
}

// ClearAdditionalInformation clears the value of the "additional_information" field.
func (u *FnetDocumentUpsert) ClearAdditionalInformation() *FnetDocumentUpsert {
	u.SetNull(fnetdocument.FieldAdditionalInformation)
	return u
}

// SetDocumentCategory sets the "document_category" field.
func (u *FnetDocumentUpsert) SetDocumentCategory(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldDocumentCategory, v)
	return u
}

// UpdateDocumentCategory sets the "document_category" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateDocumentCategory() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldDocumentCategory)
	return u
}

// SetDocumentStatus sets the "document_status" field.
func (u *FnetDocumentUpsert) SetDocumentStatus(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldDocumentStatus, v)
	return u
}

// UpdateDocumentStatus sets the "document_status" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateDocumentStatus() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldDocumentStatus)
	return u
}

// SetDocumentSubCategory1 sets the "document_sub_category1" field.
func (u *FnetDocumentUpsert) SetDocumentSubCategory1(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldDocumentSubCategory1, v)
	return u
}

// UpdateDocumentSubCategory1 sets the "document_sub_category1" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateDocumentSubCategory1() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldDocumentSubCategory1)
	return u
}

// ClearDocumentSubCategory1 clears the value of the "document_sub_category1" field.
func (u *FnetDocumentUpsert) ClearDocumentSubCategory1() *FnetDocumentUpsert {
	u.SetNull(fnetdocument.FieldDocumentSubCategory1)
	return u
}

// SetDocumentSubCategory2 sets the "document_sub_category2" field.
func (u *FnetDocumentUpsert) SetDocumentSubCategory2(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldDocumentSubCategory2, v)
	return u
}

// UpdateDocumentSubCategory2 sets the "document_sub_category2" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateDocumentSubCategory2() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldDocumentSubCategory2)
	return u
}

// ClearDocumentSubCategory2 clears the value of the "document_sub_category2" field.
func (u *FnetDocumentUpsert) ClearDocumentSubCategory2() *FnetDocumentUpsert {
	u.SetNull(fnetdocument.FieldDocumentSubCategory2)
	return u
}

// SetFundDescription sets the "fund_description" field.
func (u *FnetDocumentUpsert) SetFundDescription(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldFundDescription, v)
	return u
}

// UpdateFundDescription sets the "fund_description" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateFundDescription() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldFundDescription)
	return u
}

// SetHighPriority sets the "high_priority" field.
func (u *FnetDocumentUpsert) SetHighPriority(v bool) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldHighPriority, v)
	return u
}

// UpdateHighPriority sets the "high_priority" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateHighPriority() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldHighPriority)
	return u
}

// SetMarketName sets the "market_name" field.
func (u *FnetDocumentUpsert) SetMarketName(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldMarketName, v)
	return u
}

// UpdateMarketName sets the "market_name" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateMarketName() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldMarketName)
	return u
}

// ClearMarketName clears the value of the "market_name" field.
func (u *FnetDocumentUpsert) ClearMarketName() *FnetDocumentUpsert {
	u.SetNull(fnetdocument.FieldMarketName)
	return u
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (u *FnetDocumentUpsert) SetReferenceDateFormat(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldReferenceDateFormat, v)
	return u
}

// UpdateReferenceDateFormat sets the "reference_date_format" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateReferenceDateFormat() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldReferenceDateFormat)
	return u
}

// SetReferenceDate sets the "reference_date" field.
func (u *FnetDocumentUpsert) SetReferenceDate(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldReferenceDate, v)
	return u
}

// UpdateReferenceDate sets the "reference_date" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateReferenceDate() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldReferenceDate)
	return u
}

// SetReviewed sets the "reviewed" field.
func (u *FnetDocumentUpsert) SetReviewed(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldReviewed, v)
	return u
}

// UpdateReviewed sets the "reviewed" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateReviewed() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldReviewed)
	return u
}

// SetStatusDescription sets the "status_description" field.
func (u *FnetDocumentUpsert) SetStatusDescription(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldStatusDescription, v)
	return u
}

// UpdateStatusDescription sets the "status_description" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateStatusDescription() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldStatusDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *FnetDocumentUpsert) SetStatus(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateStatus() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldStatus)
	return u
}

// SetSubmissionDate sets the "submission_date" field.
func (u *FnetDocumentUpsert) SetSubmissionDate(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldSubmissionDate, v)
	return u
}

// UpdateSubmissionDate sets the "submission_date" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateSubmissionDate() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldSubmissionDate)
	return u
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (u *FnetDocumentUpsert) SetSubmissionMethodDescription(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldSubmissionMethodDescription, v)
	return u
}

// UpdateSubmissionMethodDescription sets the "submission_method_description" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateSubmissionMethodDescription() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldSubmissionMethodDescription)
	return u
}

// SetSubmissionMethod sets the "submission_method" field.
func (u *FnetDocumentUpsert) SetSubmissionMethod(v string) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldSubmissionMethod, v)
	return u
}

// UpdateSubmissionMethod sets the "submission_method" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateSubmissionMethod() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldSubmissionMethod)
	return u
}

// SetVersion sets the "version" field.
func (u *FnetDocumentUpsert) SetVersion(v int) *FnetDocumentUpsert {
	u.Set(fnetdocument.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *FnetDocumentUpsert) UpdateVersion() *FnetDocumentUpsert {
	u.SetExcluded(fnetdocument.FieldVersion)
	return u
}

// AddVersion adds v to the "version" field.
func (u *FnetDocumentUpsert) AddVersion(v int) *FnetDocumentUpsert {
	u.Add(fnetdocument.FieldVersion, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.FnetDocument.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FnetDocumentUpsertOne) UpdateNewValues() *FnetDocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.FnetID(); exists {
			s.SetIgnore(fnetdocument.FieldFnetID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FnetDocument.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *FnetDocumentUpsertOne) Ignore() *FnetDocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FnetDocumentUpsertOne) DoNothing() *FnetDocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FnetDocumentCreate.OnConflict
// documentation for more info.
func (u *FnetDocumentUpsertOne) Update(set func(*FnetDocumentUpsert)) *FnetDocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FnetDocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetFnetID sets the "fnet_id" field.
func (u *FnetDocumentUpsertOne) SetFnetID(v int) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetFnetID(v)
	})
}

// AddFnetID adds v to the "fnet_id" field.
func (u *FnetDocumentUpsertOne) AddFnetID(v int) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.AddFnetID(v)
	})
}

// UpdateFnetID sets the "fnet_id" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateFnetID() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateFnetID()
	})
}

// SetAdditionalInformation sets the "additional_information" field.
func (u *FnetDocumentUpsertOne) SetAdditionalInformation(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetAdditionalInformation(v)
	})
}

// UpdateAdditionalInformation sets the "additional_information" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateAdditionalInformation() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateAdditionalInformation()
	})
}

// ClearAdditionalInformation clears the value of the "additional_information" field.
func (u *FnetDocumentUpsertOne) ClearAdditionalInformation() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearAdditionalInformation()
	})
}

// SetDocumentCategory sets the "document_category" field.
func (u *FnetDocumentUpsertOne) SetDocumentCategory(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentCategory(v)
	})
}

// UpdateDocumentCategory sets the "document_category" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateDocumentCategory() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentCategory()
	})
}

// SetDocumentStatus sets the "document_status" field.
func (u *FnetDocumentUpsertOne) SetDocumentStatus(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentStatus(v)
	})
}

// UpdateDocumentStatus sets the "document_status" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateDocumentStatus() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentStatus()
	})
}

// SetDocumentSubCategory1 sets the "document_sub_category1" field.
func (u *FnetDocumentUpsertOne) SetDocumentSubCategory1(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentSubCategory1(v)
	})
}

// UpdateDocumentSubCategory1 sets the "document_sub_category1" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateDocumentSubCategory1() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentSubCategory1()
	})
}

// ClearDocumentSubCategory1 clears the value of the "document_sub_category1" field.
func (u *FnetDocumentUpsertOne) ClearDocumentSubCategory1() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearDocumentSubCategory1()
	})
}

// SetDocumentSubCategory2 sets the "document_sub_category2" field.
func (u *FnetDocumentUpsertOne) SetDocumentSubCategory2(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentSubCategory2(v)
	})
}

// UpdateDocumentSubCategory2 sets the "document_sub_category2" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateDocumentSubCategory2() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentSubCategory2()
	})
}

// ClearDocumentSubCategory2 clears the value of the "document_sub_category2" field.
func (u *FnetDocumentUpsertOne) ClearDocumentSubCategory2() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearDocumentSubCategory2()
	})
}

// SetFundDescription sets the "fund_description" field.
func (u *FnetDocumentUpsertOne) SetFundDescription(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetFundDescription(v)
	})
}

// UpdateFundDescription sets the "fund_description" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateFundDescription() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateFundDescription()
	})
}

// SetHighPriority sets the "high_priority" field.
func (u *FnetDocumentUpsertOne) SetHighPriority(v bool) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetHighPriority(v)
	})
}

// UpdateHighPriority sets the "high_priority" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateHighPriority() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateHighPriority()
	})
}

// SetMarketName sets the "market_name" field.
func (u *FnetDocumentUpsertOne) SetMarketName(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetMarketName(v)
	})
}

// UpdateMarketName sets the "market_name" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateMarketName() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateMarketName()
	})
}

// ClearMarketName clears the value of the "market_name" field.
func (u *FnetDocumentUpsertOne) ClearMarketName() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearMarketName()
	})
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (u *FnetDocumentUpsertOne) SetReferenceDateFormat(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetReferenceDateFormat(v)
	})
}

// UpdateReferenceDateFormat sets the "reference_date_format" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateReferenceDateFormat() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateReferenceDateFormat()
	})
}

// SetReferenceDate sets the "reference_date" field.
func (u *FnetDocumentUpsertOne) SetReferenceDate(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetReferenceDate(v)
	})
}

// UpdateReferenceDate sets the "reference_date" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateReferenceDate() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateReferenceDate()
	})
}

// SetReviewed sets the "reviewed" field.
func (u *FnetDocumentUpsertOne) SetReviewed(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetReviewed(v)
	})
}

// UpdateReviewed sets the "reviewed" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateReviewed() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateReviewed()
	})
}

// SetStatusDescription sets the "status_description" field.
func (u *FnetDocumentUpsertOne) SetStatusDescription(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetStatusDescription(v)
	})
}

// UpdateStatusDescription sets the "status_description" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateStatusDescription() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateStatusDescription()
	})
}

// SetStatus sets the "status" field.
func (u *FnetDocumentUpsertOne) SetStatus(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateStatus() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateStatus()
	})
}

// SetSubmissionDate sets the "submission_date" field.
func (u *FnetDocumentUpsertOne) SetSubmissionDate(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetSubmissionDate(v)
	})
}

// UpdateSubmissionDate sets the "submission_date" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateSubmissionDate() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateSubmissionDate()
	})
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (u *FnetDocumentUpsertOne) SetSubmissionMethodDescription(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetSubmissionMethodDescription(v)
	})
}

// UpdateSubmissionMethodDescription sets the "submission_method_description" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateSubmissionMethodDescription() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateSubmissionMethodDescription()
	})
}

// SetSubmissionMethod sets the "submission_method" field.
func (u *FnetDocumentUpsertOne) SetSubmissionMethod(v string) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetSubmissionMethod(v)
	})
}

// UpdateSubmissionMethod sets the "submission_method" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateSubmissionMethod() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateSubmissionMethod()
	})
}

// SetVersion sets the "version" field.
func (u *FnetDocumentUpsertOne) SetVersion(v int) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *FnetDocumentUpsertOne) AddVersion(v int) *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *FnetDocumentUpsertOne) UpdateVersion() *FnetDocumentUpsertOne {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *FnetDocumentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FnetDocumentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FnetDocumentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *FnetDocumentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *FnetDocumentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// FnetDocumentCreateBulk is the builder for creating many FnetDocument entities in bulk.
type FnetDocumentCreateBulk struct {
	config
	builders []*FnetDocumentCreate
	conflict []sql.ConflictOption
}

// Save creates the FnetDocument entities in the database.
func (fdcb *FnetDocumentCreateBulk) Save(ctx context.Context) ([]*FnetDocument, error) {
	specs := make([]*sqlgraph.CreateSpec, len(fdcb.builders))
	nodes := make([]*FnetDocument, len(fdcb.builders))
	mutators := make([]Mutator, len(fdcb.builders))
	for i := range fdcb.builders {
		func(i int, root context.Context) {
			builder := fdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FnetDocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = fdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fdcb *FnetDocumentCreateBulk) SaveX(ctx context.Context) []*FnetDocument {
	v, err := fdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fdcb *FnetDocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := fdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdcb *FnetDocumentCreateBulk) ExecX(ctx context.Context) {
	if err := fdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.FnetDocument.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.FnetDocumentUpsert) {
//			SetFnetID(v+v).
//		}).
//		Exec(ctx)
func (fdcb *FnetDocumentCreateBulk) OnConflict(opts ...sql.ConflictOption) *FnetDocumentUpsertBulk {
	fdcb.conflict = opts
	return &FnetDocumentUpsertBulk{
		create: fdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.FnetDocument.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (fdcb *FnetDocumentCreateBulk) OnConflictColumns(columns ...string) *FnetDocumentUpsertBulk {
	fdcb.conflict = append(fdcb.conflict, sql.ConflictColumns(columns...))
	return &FnetDocumentUpsertBulk{
		create: fdcb,
	}
}

// FnetDocumentUpsertBulk is the builder for "upsert"-ing
// a bulk of FnetDocument nodes.
type FnetDocumentUpsertBulk struct {
	create *FnetDocumentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.FnetDocument.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *FnetDocumentUpsertBulk) UpdateNewValues() *FnetDocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.FnetID(); exists {
				s.SetIgnore(fnetdocument.FieldFnetID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.FnetDocument.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *FnetDocumentUpsertBulk) Ignore() *FnetDocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *FnetDocumentUpsertBulk) DoNothing() *FnetDocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the FnetDocumentCreateBulk.OnConflict
// documentation for more info.
func (u *FnetDocumentUpsertBulk) Update(set func(*FnetDocumentUpsert)) *FnetDocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&FnetDocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetFnetID sets the "fnet_id" field.
func (u *FnetDocumentUpsertBulk) SetFnetID(v int) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetFnetID(v)
	})
}

// AddFnetID adds v to the "fnet_id" field.
func (u *FnetDocumentUpsertBulk) AddFnetID(v int) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.AddFnetID(v)
	})
}

// UpdateFnetID sets the "fnet_id" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateFnetID() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateFnetID()
	})
}

// SetAdditionalInformation sets the "additional_information" field.
func (u *FnetDocumentUpsertBulk) SetAdditionalInformation(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetAdditionalInformation(v)
	})
}

// UpdateAdditionalInformation sets the "additional_information" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateAdditionalInformation() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateAdditionalInformation()
	})
}

// ClearAdditionalInformation clears the value of the "additional_information" field.
func (u *FnetDocumentUpsertBulk) ClearAdditionalInformation() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearAdditionalInformation()
	})
}

// SetDocumentCategory sets the "document_category" field.
func (u *FnetDocumentUpsertBulk) SetDocumentCategory(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentCategory(v)
	})
}

// UpdateDocumentCategory sets the "document_category" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateDocumentCategory() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentCategory()
	})
}

// SetDocumentStatus sets the "document_status" field.
func (u *FnetDocumentUpsertBulk) SetDocumentStatus(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentStatus(v)
	})
}

// UpdateDocumentStatus sets the "document_status" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateDocumentStatus() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentStatus()
	})
}

// SetDocumentSubCategory1 sets the "document_sub_category1" field.
func (u *FnetDocumentUpsertBulk) SetDocumentSubCategory1(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentSubCategory1(v)
	})
}

// UpdateDocumentSubCategory1 sets the "document_sub_category1" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateDocumentSubCategory1() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentSubCategory1()
	})
}

// ClearDocumentSubCategory1 clears the value of the "document_sub_category1" field.
func (u *FnetDocumentUpsertBulk) ClearDocumentSubCategory1() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearDocumentSubCategory1()
	})
}

// SetDocumentSubCategory2 sets the "document_sub_category2" field.
func (u *FnetDocumentUpsertBulk) SetDocumentSubCategory2(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetDocumentSubCategory2(v)
	})
}

// UpdateDocumentSubCategory2 sets the "document_sub_category2" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateDocumentSubCategory2() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateDocumentSubCategory2()
	})
}

// ClearDocumentSubCategory2 clears the value of the "document_sub_category2" field.
func (u *FnetDocumentUpsertBulk) ClearDocumentSubCategory2() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearDocumentSubCategory2()
	})
}

// SetFundDescription sets the "fund_description" field.
func (u *FnetDocumentUpsertBulk) SetFundDescription(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetFundDescription(v)
	})
}

// UpdateFundDescription sets the "fund_description" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateFundDescription() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateFundDescription()
	})
}

// SetHighPriority sets the "high_priority" field.
func (u *FnetDocumentUpsertBulk) SetHighPriority(v bool) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetHighPriority(v)
	})
}

// UpdateHighPriority sets the "high_priority" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateHighPriority() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateHighPriority()
	})
}

// SetMarketName sets the "market_name" field.
func (u *FnetDocumentUpsertBulk) SetMarketName(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetMarketName(v)
	})
}

// UpdateMarketName sets the "market_name" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateMarketName() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateMarketName()
	})
}

// ClearMarketName clears the value of the "market_name" field.
func (u *FnetDocumentUpsertBulk) ClearMarketName() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.ClearMarketName()
	})
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (u *FnetDocumentUpsertBulk) SetReferenceDateFormat(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetReferenceDateFormat(v)
	})
}

// UpdateReferenceDateFormat sets the "reference_date_format" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateReferenceDateFormat() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateReferenceDateFormat()
	})
}

// SetReferenceDate sets the "reference_date" field.
func (u *FnetDocumentUpsertBulk) SetReferenceDate(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetReferenceDate(v)
	})
}

// UpdateReferenceDate sets the "reference_date" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateReferenceDate() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateReferenceDate()
	})
}

// SetReviewed sets the "reviewed" field.
func (u *FnetDocumentUpsertBulk) SetReviewed(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetReviewed(v)
	})
}

// UpdateReviewed sets the "reviewed" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateReviewed() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateReviewed()
	})
}

// SetStatusDescription sets the "status_description" field.
func (u *FnetDocumentUpsertBulk) SetStatusDescription(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetStatusDescription(v)
	})
}

// UpdateStatusDescription sets the "status_description" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateStatusDescription() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateStatusDescription()
	})
}

// SetStatus sets the "status" field.
func (u *FnetDocumentUpsertBulk) SetStatus(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateStatus() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateStatus()
	})
}

// SetSubmissionDate sets the "submission_date" field.
func (u *FnetDocumentUpsertBulk) SetSubmissionDate(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetSubmissionDate(v)
	})
}

// UpdateSubmissionDate sets the "submission_date" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateSubmissionDate() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateSubmissionDate()
	})
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (u *FnetDocumentUpsertBulk) SetSubmissionMethodDescription(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetSubmissionMethodDescription(v)
	})
}

// UpdateSubmissionMethodDescription sets the "submission_method_description" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateSubmissionMethodDescription() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateSubmissionMethodDescription()
	})
}

// SetSubmissionMethod sets the "submission_method" field.
func (u *FnetDocumentUpsertBulk) SetSubmissionMethod(v string) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetSubmissionMethod(v)
	})
}

// UpdateSubmissionMethod sets the "submission_method" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateSubmissionMethod() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateSubmissionMethod()
	})
}

// SetVersion sets the "version" field.
func (u *FnetDocumentUpsertBulk) SetVersion(v int) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.SetVersion(v)
	})
}

// AddVersion adds v to the "version" field.
func (u *FnetDocumentUpsertBulk) AddVersion(v int) *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.AddVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *FnetDocumentUpsertBulk) UpdateVersion() *FnetDocumentUpsertBulk {
	return u.Update(func(s *FnetDocumentUpsert) {
		s.UpdateVersion()
	})
}

// Exec executes the query.
func (u *FnetDocumentUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the FnetDocumentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for FnetDocumentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *FnetDocumentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
