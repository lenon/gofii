// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lenon/gofii/ent/fnetsubcategory1"
)

// FnetSubCategory1 is the model entity for the FnetSubCategory1 schema.
type FnetSubCategory1 struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FnetSubCategory1Query when eager-loading is set.
	Edges        FnetSubCategory1Edges `json:"edges"`
	selectValues sql.SelectValues
}

// FnetSubCategory1Edges holds the relations/edges for other nodes in the graph.
type FnetSubCategory1Edges struct {
	// Documents holds the value of the documents edge.
	Documents []*FnetDocument `json:"documents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DocumentsOrErr returns the Documents value or an error if the edge
// was not loaded in eager-loading.
func (e FnetSubCategory1Edges) DocumentsOrErr() ([]*FnetDocument, error) {
	if e.loadedTypes[0] {
		return e.Documents, nil
	}
	return nil, &NotLoadedError{edge: "documents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*FnetSubCategory1) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fnetsubcategory1.FieldID:
			values[i] = new(sql.NullInt64)
		case fnetsubcategory1.FieldName:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the FnetSubCategory1 fields.
func (fsc *FnetSubCategory1) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fnetsubcategory1.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			fsc.ID = int(value.Int64)
		case fnetsubcategory1.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				fsc.Name = value.String
			}
		default:
			fsc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the FnetSubCategory1.
// This includes values selected through modifiers, order, etc.
func (fsc *FnetSubCategory1) Value(name string) (ent.Value, error) {
	return fsc.selectValues.Get(name)
}

// QueryDocuments queries the "documents" edge of the FnetSubCategory1 entity.
func (fsc *FnetSubCategory1) QueryDocuments() *FnetDocumentQuery {
	return NewFnetSubCategory1Client(fsc.config).QueryDocuments(fsc)
}

// Update returns a builder for updating this FnetSubCategory1.
// Note that you need to call FnetSubCategory1.Unwrap() before calling this method if this FnetSubCategory1
// was returned from a transaction, and the transaction was committed or rolled back.
func (fsc *FnetSubCategory1) Update() *FnetSubCategory1UpdateOne {
	return NewFnetSubCategory1Client(fsc.config).UpdateOne(fsc)
}

// Unwrap unwraps the FnetSubCategory1 entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (fsc *FnetSubCategory1) Unwrap() *FnetSubCategory1 {
	_tx, ok := fsc.config.driver.(*txDriver)
	if !ok {
		panic("ent: FnetSubCategory1 is not a transactional entity")
	}
	fsc.config.driver = _tx.drv
	return fsc
}

// String implements the fmt.Stringer.
func (fsc *FnetSubCategory1) String() string {
	var builder strings.Builder
	builder.WriteString("FnetSubCategory1(")
	builder.WriteString(fmt.Sprintf("id=%v, ", fsc.ID))
	builder.WriteString("name=")
	builder.WriteString(fsc.Name)
	builder.WriteByte(')')
	return builder.String()
}

// FnetSubCategory1s is a parsable slice of FnetSubCategory1.
type FnetSubCategory1s []*FnetSubCategory1
