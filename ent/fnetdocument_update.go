// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lenon/gofii/ent/fnetdocument"
	"github.com/lenon/gofii/ent/predicate"
)

// FnetDocumentUpdate is the builder for updating FnetDocument entities.
type FnetDocumentUpdate struct {
	config
	hooks    []Hook
	mutation *FnetDocumentMutation
}

// Where appends a list predicates to the FnetDocumentUpdate builder.
func (fdu *FnetDocumentUpdate) Where(ps ...predicate.FnetDocument) *FnetDocumentUpdate {
	fdu.mutation.Where(ps...)
	return fdu
}

// SetAdditionalInformation sets the "additional_information" field.
func (fdu *FnetDocumentUpdate) SetAdditionalInformation(s string) *FnetDocumentUpdate {
	fdu.mutation.SetAdditionalInformation(s)
	return fdu
}

// SetNillableAdditionalInformation sets the "additional_information" field if the given value is not nil.
func (fdu *FnetDocumentUpdate) SetNillableAdditionalInformation(s *string) *FnetDocumentUpdate {
	if s != nil {
		fdu.SetAdditionalInformation(*s)
	}
	return fdu
}

// ClearAdditionalInformation clears the value of the "additional_information" field.
func (fdu *FnetDocumentUpdate) ClearAdditionalInformation() *FnetDocumentUpdate {
	fdu.mutation.ClearAdditionalInformation()
	return fdu
}

// SetDocumentCategory sets the "document_category" field.
func (fdu *FnetDocumentUpdate) SetDocumentCategory(s string) *FnetDocumentUpdate {
	fdu.mutation.SetDocumentCategory(s)
	return fdu
}

// SetDocumentStatus sets the "document_status" field.
func (fdu *FnetDocumentUpdate) SetDocumentStatus(s string) *FnetDocumentUpdate {
	fdu.mutation.SetDocumentStatus(s)
	return fdu
}

// SetDocumentSubCategory1 sets the "document_sub_category1" field.
func (fdu *FnetDocumentUpdate) SetDocumentSubCategory1(s string) *FnetDocumentUpdate {
	fdu.mutation.SetDocumentSubCategory1(s)
	return fdu
}

// SetNillableDocumentSubCategory1 sets the "document_sub_category1" field if the given value is not nil.
func (fdu *FnetDocumentUpdate) SetNillableDocumentSubCategory1(s *string) *FnetDocumentUpdate {
	if s != nil {
		fdu.SetDocumentSubCategory1(*s)
	}
	return fdu
}

// ClearDocumentSubCategory1 clears the value of the "document_sub_category1" field.
func (fdu *FnetDocumentUpdate) ClearDocumentSubCategory1() *FnetDocumentUpdate {
	fdu.mutation.ClearDocumentSubCategory1()
	return fdu
}

// SetDocumentSubCategory2 sets the "document_sub_category2" field.
func (fdu *FnetDocumentUpdate) SetDocumentSubCategory2(s string) *FnetDocumentUpdate {
	fdu.mutation.SetDocumentSubCategory2(s)
	return fdu
}

// SetNillableDocumentSubCategory2 sets the "document_sub_category2" field if the given value is not nil.
func (fdu *FnetDocumentUpdate) SetNillableDocumentSubCategory2(s *string) *FnetDocumentUpdate {
	if s != nil {
		fdu.SetDocumentSubCategory2(*s)
	}
	return fdu
}

// ClearDocumentSubCategory2 clears the value of the "document_sub_category2" field.
func (fdu *FnetDocumentUpdate) ClearDocumentSubCategory2() *FnetDocumentUpdate {
	fdu.mutation.ClearDocumentSubCategory2()
	return fdu
}

// SetFundDescription sets the "fund_description" field.
func (fdu *FnetDocumentUpdate) SetFundDescription(s string) *FnetDocumentUpdate {
	fdu.mutation.SetFundDescription(s)
	return fdu
}

// SetHighPriority sets the "high_priority" field.
func (fdu *FnetDocumentUpdate) SetHighPriority(b bool) *FnetDocumentUpdate {
	fdu.mutation.SetHighPriority(b)
	return fdu
}

// SetMarketName sets the "market_name" field.
func (fdu *FnetDocumentUpdate) SetMarketName(s string) *FnetDocumentUpdate {
	fdu.mutation.SetMarketName(s)
	return fdu
}

// SetNillableMarketName sets the "market_name" field if the given value is not nil.
func (fdu *FnetDocumentUpdate) SetNillableMarketName(s *string) *FnetDocumentUpdate {
	if s != nil {
		fdu.SetMarketName(*s)
	}
	return fdu
}

// ClearMarketName clears the value of the "market_name" field.
func (fdu *FnetDocumentUpdate) ClearMarketName() *FnetDocumentUpdate {
	fdu.mutation.ClearMarketName()
	return fdu
}

// SetReferenceDate sets the "reference_date" field.
func (fdu *FnetDocumentUpdate) SetReferenceDate(t time.Time) *FnetDocumentUpdate {
	fdu.mutation.SetReferenceDate(t)
	return fdu
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (fdu *FnetDocumentUpdate) SetReferenceDateFormat(s string) *FnetDocumentUpdate {
	fdu.mutation.SetReferenceDateFormat(s)
	return fdu
}

// SetReferenceDateStr sets the "reference_date_str" field.
func (fdu *FnetDocumentUpdate) SetReferenceDateStr(s string) *FnetDocumentUpdate {
	fdu.mutation.SetReferenceDateStr(s)
	return fdu
}

// SetReviewed sets the "reviewed" field.
func (fdu *FnetDocumentUpdate) SetReviewed(s string) *FnetDocumentUpdate {
	fdu.mutation.SetReviewed(s)
	return fdu
}

// SetStatus sets the "status" field.
func (fdu *FnetDocumentUpdate) SetStatus(s string) *FnetDocumentUpdate {
	fdu.mutation.SetStatus(s)
	return fdu
}

// SetStatusDescription sets the "status_description" field.
func (fdu *FnetDocumentUpdate) SetStatusDescription(s string) *FnetDocumentUpdate {
	fdu.mutation.SetStatusDescription(s)
	return fdu
}

// SetSubmissionDate sets the "submission_date" field.
func (fdu *FnetDocumentUpdate) SetSubmissionDate(t time.Time) *FnetDocumentUpdate {
	fdu.mutation.SetSubmissionDate(t)
	return fdu
}

// SetSubmissionDateStr sets the "submission_date_str" field.
func (fdu *FnetDocumentUpdate) SetSubmissionDateStr(s string) *FnetDocumentUpdate {
	fdu.mutation.SetSubmissionDateStr(s)
	return fdu
}

// SetSubmissionMethod sets the "submission_method" field.
func (fdu *FnetDocumentUpdate) SetSubmissionMethod(s string) *FnetDocumentUpdate {
	fdu.mutation.SetSubmissionMethod(s)
	return fdu
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (fdu *FnetDocumentUpdate) SetSubmissionMethodDescription(s string) *FnetDocumentUpdate {
	fdu.mutation.SetSubmissionMethodDescription(s)
	return fdu
}

// SetVersion sets the "version" field.
func (fdu *FnetDocumentUpdate) SetVersion(i int) *FnetDocumentUpdate {
	fdu.mutation.ResetVersion()
	fdu.mutation.SetVersion(i)
	return fdu
}

// AddVersion adds i to the "version" field.
func (fdu *FnetDocumentUpdate) AddVersion(i int) *FnetDocumentUpdate {
	fdu.mutation.AddVersion(i)
	return fdu
}

// Mutation returns the FnetDocumentMutation object of the builder.
func (fdu *FnetDocumentUpdate) Mutation() *FnetDocumentMutation {
	return fdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fdu *FnetDocumentUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(fdu.hooks) == 0 {
		if err = fdu.check(); err != nil {
			return 0, err
		}
		affected, err = fdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FnetDocumentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fdu.check(); err != nil {
				return 0, err
			}
			fdu.mutation = mutation
			affected, err = fdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(fdu.hooks) - 1; i >= 0; i-- {
			if fdu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (fdu *FnetDocumentUpdate) SaveX(ctx context.Context) int {
	affected, err := fdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fdu *FnetDocumentUpdate) Exec(ctx context.Context) error {
	_, err := fdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fdu *FnetDocumentUpdate) ExecX(ctx context.Context) {
	if err := fdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fdu *FnetDocumentUpdate) check() error {
	if v, ok := fdu.mutation.DocumentCategory(); ok {
		if err := fnetdocument.DocumentCategoryValidator(v); err != nil {
			return &ValidationError{Name: "document_category", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.document_category": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.DocumentStatus(); ok {
		if err := fnetdocument.DocumentStatusValidator(v); err != nil {
			return &ValidationError{Name: "document_status", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.document_status": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.FundDescription(); ok {
		if err := fnetdocument.FundDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "fund_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.fund_description": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.ReferenceDateFormat(); ok {
		if err := fnetdocument.ReferenceDateFormatValidator(v); err != nil {
			return &ValidationError{Name: "reference_date_format", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reference_date_format": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.ReferenceDateStr(); ok {
		if err := fnetdocument.ReferenceDateStrValidator(v); err != nil {
			return &ValidationError{Name: "reference_date_str", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reference_date_str": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Reviewed(); ok {
		if err := fnetdocument.ReviewedValidator(v); err != nil {
			return &ValidationError{Name: "reviewed", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reviewed": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Status(); ok {
		if err := fnetdocument.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.status": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.StatusDescription(); ok {
		if err := fnetdocument.StatusDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "status_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.status_description": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.SubmissionDateStr(); ok {
		if err := fnetdocument.SubmissionDateStrValidator(v); err != nil {
			return &ValidationError{Name: "submission_date_str", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_date_str": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.SubmissionMethod(); ok {
		if err := fnetdocument.SubmissionMethodValidator(v); err != nil {
			return &ValidationError{Name: "submission_method", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_method": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.SubmissionMethodDescription(); ok {
		if err := fnetdocument.SubmissionMethodDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "submission_method_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_method_description": %w`, err)}
		}
	}
	if v, ok := fdu.mutation.Version(); ok {
		if err := fnetdocument.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.version": %w`, err)}
		}
	}
	return nil
}

func (fdu *FnetDocumentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fnetdocument.Table,
			Columns: fnetdocument.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fnetdocument.FieldID,
			},
		},
	}
	if ps := fdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fdu.mutation.AdditionalInformation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldAdditionalInformation,
		})
	}
	if fdu.mutation.AdditionalInformationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldAdditionalInformation,
		})
	}
	if value, ok := fdu.mutation.DocumentCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentCategory,
		})
	}
	if value, ok := fdu.mutation.DocumentStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentStatus,
		})
	}
	if value, ok := fdu.mutation.DocumentSubCategory1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentSubCategory1,
		})
	}
	if fdu.mutation.DocumentSubCategory1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldDocumentSubCategory1,
		})
	}
	if value, ok := fdu.mutation.DocumentSubCategory2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentSubCategory2,
		})
	}
	if fdu.mutation.DocumentSubCategory2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldDocumentSubCategory2,
		})
	}
	if value, ok := fdu.mutation.FundDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldFundDescription,
		})
	}
	if value, ok := fdu.mutation.HighPriority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fnetdocument.FieldHighPriority,
		})
	}
	if value, ok := fdu.mutation.MarketName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldMarketName,
		})
	}
	if fdu.mutation.MarketNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldMarketName,
		})
	}
	if value, ok := fdu.mutation.ReferenceDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fnetdocument.FieldReferenceDate,
		})
	}
	if value, ok := fdu.mutation.ReferenceDateFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReferenceDateFormat,
		})
	}
	if value, ok := fdu.mutation.ReferenceDateStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReferenceDateStr,
		})
	}
	if value, ok := fdu.mutation.Reviewed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReviewed,
		})
	}
	if value, ok := fdu.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldStatus,
		})
	}
	if value, ok := fdu.mutation.StatusDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldStatusDescription,
		})
	}
	if value, ok := fdu.mutation.SubmissionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fnetdocument.FieldSubmissionDate,
		})
	}
	if value, ok := fdu.mutation.SubmissionDateStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionDateStr,
		})
	}
	if value, ok := fdu.mutation.SubmissionMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionMethod,
		})
	}
	if value, ok := fdu.mutation.SubmissionMethodDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionMethodDescription,
		})
	}
	if value, ok := fdu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fnetdocument.FieldVersion,
		})
	}
	if value, ok := fdu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fnetdocument.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fnetdocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// FnetDocumentUpdateOne is the builder for updating a single FnetDocument entity.
type FnetDocumentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FnetDocumentMutation
}

// SetAdditionalInformation sets the "additional_information" field.
func (fduo *FnetDocumentUpdateOne) SetAdditionalInformation(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetAdditionalInformation(s)
	return fduo
}

// SetNillableAdditionalInformation sets the "additional_information" field if the given value is not nil.
func (fduo *FnetDocumentUpdateOne) SetNillableAdditionalInformation(s *string) *FnetDocumentUpdateOne {
	if s != nil {
		fduo.SetAdditionalInformation(*s)
	}
	return fduo
}

// ClearAdditionalInformation clears the value of the "additional_information" field.
func (fduo *FnetDocumentUpdateOne) ClearAdditionalInformation() *FnetDocumentUpdateOne {
	fduo.mutation.ClearAdditionalInformation()
	return fduo
}

// SetDocumentCategory sets the "document_category" field.
func (fduo *FnetDocumentUpdateOne) SetDocumentCategory(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetDocumentCategory(s)
	return fduo
}

// SetDocumentStatus sets the "document_status" field.
func (fduo *FnetDocumentUpdateOne) SetDocumentStatus(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetDocumentStatus(s)
	return fduo
}

// SetDocumentSubCategory1 sets the "document_sub_category1" field.
func (fduo *FnetDocumentUpdateOne) SetDocumentSubCategory1(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetDocumentSubCategory1(s)
	return fduo
}

// SetNillableDocumentSubCategory1 sets the "document_sub_category1" field if the given value is not nil.
func (fduo *FnetDocumentUpdateOne) SetNillableDocumentSubCategory1(s *string) *FnetDocumentUpdateOne {
	if s != nil {
		fduo.SetDocumentSubCategory1(*s)
	}
	return fduo
}

// ClearDocumentSubCategory1 clears the value of the "document_sub_category1" field.
func (fduo *FnetDocumentUpdateOne) ClearDocumentSubCategory1() *FnetDocumentUpdateOne {
	fduo.mutation.ClearDocumentSubCategory1()
	return fduo
}

// SetDocumentSubCategory2 sets the "document_sub_category2" field.
func (fduo *FnetDocumentUpdateOne) SetDocumentSubCategory2(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetDocumentSubCategory2(s)
	return fduo
}

// SetNillableDocumentSubCategory2 sets the "document_sub_category2" field if the given value is not nil.
func (fduo *FnetDocumentUpdateOne) SetNillableDocumentSubCategory2(s *string) *FnetDocumentUpdateOne {
	if s != nil {
		fduo.SetDocumentSubCategory2(*s)
	}
	return fduo
}

// ClearDocumentSubCategory2 clears the value of the "document_sub_category2" field.
func (fduo *FnetDocumentUpdateOne) ClearDocumentSubCategory2() *FnetDocumentUpdateOne {
	fduo.mutation.ClearDocumentSubCategory2()
	return fduo
}

// SetFundDescription sets the "fund_description" field.
func (fduo *FnetDocumentUpdateOne) SetFundDescription(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetFundDescription(s)
	return fduo
}

// SetHighPriority sets the "high_priority" field.
func (fduo *FnetDocumentUpdateOne) SetHighPriority(b bool) *FnetDocumentUpdateOne {
	fduo.mutation.SetHighPriority(b)
	return fduo
}

// SetMarketName sets the "market_name" field.
func (fduo *FnetDocumentUpdateOne) SetMarketName(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetMarketName(s)
	return fduo
}

// SetNillableMarketName sets the "market_name" field if the given value is not nil.
func (fduo *FnetDocumentUpdateOne) SetNillableMarketName(s *string) *FnetDocumentUpdateOne {
	if s != nil {
		fduo.SetMarketName(*s)
	}
	return fduo
}

// ClearMarketName clears the value of the "market_name" field.
func (fduo *FnetDocumentUpdateOne) ClearMarketName() *FnetDocumentUpdateOne {
	fduo.mutation.ClearMarketName()
	return fduo
}

// SetReferenceDate sets the "reference_date" field.
func (fduo *FnetDocumentUpdateOne) SetReferenceDate(t time.Time) *FnetDocumentUpdateOne {
	fduo.mutation.SetReferenceDate(t)
	return fduo
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (fduo *FnetDocumentUpdateOne) SetReferenceDateFormat(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetReferenceDateFormat(s)
	return fduo
}

// SetReferenceDateStr sets the "reference_date_str" field.
func (fduo *FnetDocumentUpdateOne) SetReferenceDateStr(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetReferenceDateStr(s)
	return fduo
}

// SetReviewed sets the "reviewed" field.
func (fduo *FnetDocumentUpdateOne) SetReviewed(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetReviewed(s)
	return fduo
}

// SetStatus sets the "status" field.
func (fduo *FnetDocumentUpdateOne) SetStatus(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetStatus(s)
	return fduo
}

// SetStatusDescription sets the "status_description" field.
func (fduo *FnetDocumentUpdateOne) SetStatusDescription(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetStatusDescription(s)
	return fduo
}

// SetSubmissionDate sets the "submission_date" field.
func (fduo *FnetDocumentUpdateOne) SetSubmissionDate(t time.Time) *FnetDocumentUpdateOne {
	fduo.mutation.SetSubmissionDate(t)
	return fduo
}

// SetSubmissionDateStr sets the "submission_date_str" field.
func (fduo *FnetDocumentUpdateOne) SetSubmissionDateStr(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetSubmissionDateStr(s)
	return fduo
}

// SetSubmissionMethod sets the "submission_method" field.
func (fduo *FnetDocumentUpdateOne) SetSubmissionMethod(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetSubmissionMethod(s)
	return fduo
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (fduo *FnetDocumentUpdateOne) SetSubmissionMethodDescription(s string) *FnetDocumentUpdateOne {
	fduo.mutation.SetSubmissionMethodDescription(s)
	return fduo
}

// SetVersion sets the "version" field.
func (fduo *FnetDocumentUpdateOne) SetVersion(i int) *FnetDocumentUpdateOne {
	fduo.mutation.ResetVersion()
	fduo.mutation.SetVersion(i)
	return fduo
}

// AddVersion adds i to the "version" field.
func (fduo *FnetDocumentUpdateOne) AddVersion(i int) *FnetDocumentUpdateOne {
	fduo.mutation.AddVersion(i)
	return fduo
}

// Mutation returns the FnetDocumentMutation object of the builder.
func (fduo *FnetDocumentUpdateOne) Mutation() *FnetDocumentMutation {
	return fduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fduo *FnetDocumentUpdateOne) Select(field string, fields ...string) *FnetDocumentUpdateOne {
	fduo.fields = append([]string{field}, fields...)
	return fduo
}

// Save executes the query and returns the updated FnetDocument entity.
func (fduo *FnetDocumentUpdateOne) Save(ctx context.Context) (*FnetDocument, error) {
	var (
		err  error
		node *FnetDocument
	)
	if len(fduo.hooks) == 0 {
		if err = fduo.check(); err != nil {
			return nil, err
		}
		node, err = fduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FnetDocumentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = fduo.check(); err != nil {
				return nil, err
			}
			fduo.mutation = mutation
			node, err = fduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fduo.hooks) - 1; i >= 0; i-- {
			if fduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = fduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, fduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*FnetDocument)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from FnetDocumentMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (fduo *FnetDocumentUpdateOne) SaveX(ctx context.Context) *FnetDocument {
	node, err := fduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fduo *FnetDocumentUpdateOne) Exec(ctx context.Context) error {
	_, err := fduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fduo *FnetDocumentUpdateOne) ExecX(ctx context.Context) {
	if err := fduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fduo *FnetDocumentUpdateOne) check() error {
	if v, ok := fduo.mutation.DocumentCategory(); ok {
		if err := fnetdocument.DocumentCategoryValidator(v); err != nil {
			return &ValidationError{Name: "document_category", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.document_category": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.DocumentStatus(); ok {
		if err := fnetdocument.DocumentStatusValidator(v); err != nil {
			return &ValidationError{Name: "document_status", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.document_status": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.FundDescription(); ok {
		if err := fnetdocument.FundDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "fund_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.fund_description": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.ReferenceDateFormat(); ok {
		if err := fnetdocument.ReferenceDateFormatValidator(v); err != nil {
			return &ValidationError{Name: "reference_date_format", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reference_date_format": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.ReferenceDateStr(); ok {
		if err := fnetdocument.ReferenceDateStrValidator(v); err != nil {
			return &ValidationError{Name: "reference_date_str", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reference_date_str": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Reviewed(); ok {
		if err := fnetdocument.ReviewedValidator(v); err != nil {
			return &ValidationError{Name: "reviewed", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.reviewed": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Status(); ok {
		if err := fnetdocument.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.status": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.StatusDescription(); ok {
		if err := fnetdocument.StatusDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "status_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.status_description": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.SubmissionDateStr(); ok {
		if err := fnetdocument.SubmissionDateStrValidator(v); err != nil {
			return &ValidationError{Name: "submission_date_str", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_date_str": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.SubmissionMethod(); ok {
		if err := fnetdocument.SubmissionMethodValidator(v); err != nil {
			return &ValidationError{Name: "submission_method", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_method": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.SubmissionMethodDescription(); ok {
		if err := fnetdocument.SubmissionMethodDescriptionValidator(v); err != nil {
			return &ValidationError{Name: "submission_method_description", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.submission_method_description": %w`, err)}
		}
	}
	if v, ok := fduo.mutation.Version(); ok {
		if err := fnetdocument.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "FnetDocument.version": %w`, err)}
		}
	}
	return nil
}

func (fduo *FnetDocumentUpdateOne) sqlSave(ctx context.Context) (_node *FnetDocument, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   fnetdocument.Table,
			Columns: fnetdocument.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: fnetdocument.FieldID,
			},
		},
	}
	id, ok := fduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "FnetDocument.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fnetdocument.FieldID)
		for _, f := range fields {
			if !fnetdocument.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fnetdocument.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fduo.mutation.AdditionalInformation(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldAdditionalInformation,
		})
	}
	if fduo.mutation.AdditionalInformationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldAdditionalInformation,
		})
	}
	if value, ok := fduo.mutation.DocumentCategory(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentCategory,
		})
	}
	if value, ok := fduo.mutation.DocumentStatus(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentStatus,
		})
	}
	if value, ok := fduo.mutation.DocumentSubCategory1(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentSubCategory1,
		})
	}
	if fduo.mutation.DocumentSubCategory1Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldDocumentSubCategory1,
		})
	}
	if value, ok := fduo.mutation.DocumentSubCategory2(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldDocumentSubCategory2,
		})
	}
	if fduo.mutation.DocumentSubCategory2Cleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldDocumentSubCategory2,
		})
	}
	if value, ok := fduo.mutation.FundDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldFundDescription,
		})
	}
	if value, ok := fduo.mutation.HighPriority(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: fnetdocument.FieldHighPriority,
		})
	}
	if value, ok := fduo.mutation.MarketName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldMarketName,
		})
	}
	if fduo.mutation.MarketNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: fnetdocument.FieldMarketName,
		})
	}
	if value, ok := fduo.mutation.ReferenceDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fnetdocument.FieldReferenceDate,
		})
	}
	if value, ok := fduo.mutation.ReferenceDateFormat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReferenceDateFormat,
		})
	}
	if value, ok := fduo.mutation.ReferenceDateStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReferenceDateStr,
		})
	}
	if value, ok := fduo.mutation.Reviewed(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldReviewed,
		})
	}
	if value, ok := fduo.mutation.Status(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldStatus,
		})
	}
	if value, ok := fduo.mutation.StatusDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldStatusDescription,
		})
	}
	if value, ok := fduo.mutation.SubmissionDate(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: fnetdocument.FieldSubmissionDate,
		})
	}
	if value, ok := fduo.mutation.SubmissionDateStr(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionDateStr,
		})
	}
	if value, ok := fduo.mutation.SubmissionMethod(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionMethod,
		})
	}
	if value, ok := fduo.mutation.SubmissionMethodDescription(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: fnetdocument.FieldSubmissionMethodDescription,
		})
	}
	if value, ok := fduo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fnetdocument.FieldVersion,
		})
	}
	if value, ok := fduo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: fnetdocument.FieldVersion,
		})
	}
	_node = &FnetDocument{config: fduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fnetdocument.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
