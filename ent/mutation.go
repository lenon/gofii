// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"

	"github.com/lenon/gofii/ent/fnetdocument"
	"github.com/lenon/gofii/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFnetDocument = "FnetDocument"
)

// FnetDocumentMutation represents an operation that mutates the FnetDocument nodes in the graph.
type FnetDocumentMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	fnet_id                       *int
	addfnet_id                    *int
	additional_information        *string
	document_category             *string
	document_status               *string
	document_sub_category1        *string
	document_sub_category2        *string
	fund_description              *string
	high_priority                 *bool
	market_name                   *string
	reference_date_format         *string
	reference_date                *string
	reviewed                      *string
	status_description            *string
	status                        *string
	submission_date               *string
	submission_method_description *string
	submission_method             *string
	version                       *int
	addversion                    *int
	clearedFields                 map[string]struct{}
	done                          bool
	oldValue                      func(context.Context) (*FnetDocument, error)
	predicates                    []predicate.FnetDocument
}

var _ ent.Mutation = (*FnetDocumentMutation)(nil)

// fnetdocumentOption allows management of the mutation configuration using functional options.
type fnetdocumentOption func(*FnetDocumentMutation)

// newFnetDocumentMutation creates new mutation for the FnetDocument entity.
func newFnetDocumentMutation(c config, op Op, opts ...fnetdocumentOption) *FnetDocumentMutation {
	m := &FnetDocumentMutation{
		config:        c,
		op:            op,
		typ:           TypeFnetDocument,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFnetDocumentID sets the ID field of the mutation.
func withFnetDocumentID(id int) fnetdocumentOption {
	return func(m *FnetDocumentMutation) {
		var (
			err   error
			once  sync.Once
			value *FnetDocument
		)
		m.oldValue = func(ctx context.Context) (*FnetDocument, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FnetDocument.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFnetDocument sets the old FnetDocument of the mutation.
func withFnetDocument(node *FnetDocument) fnetdocumentOption {
	return func(m *FnetDocumentMutation) {
		m.oldValue = func(context.Context) (*FnetDocument, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FnetDocumentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FnetDocumentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FnetDocumentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FnetDocumentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FnetDocument.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFnetID sets the "fnet_id" field.
func (m *FnetDocumentMutation) SetFnetID(i int) {
	m.fnet_id = &i
	m.addfnet_id = nil
}

// FnetID returns the value of the "fnet_id" field in the mutation.
func (m *FnetDocumentMutation) FnetID() (r int, exists bool) {
	v := m.fnet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFnetID returns the old "fnet_id" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldFnetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFnetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFnetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFnetID: %w", err)
	}
	return oldValue.FnetID, nil
}

// AddFnetID adds i to the "fnet_id" field.
func (m *FnetDocumentMutation) AddFnetID(i int) {
	if m.addfnet_id != nil {
		*m.addfnet_id += i
	} else {
		m.addfnet_id = &i
	}
}

// AddedFnetID returns the value that was added to the "fnet_id" field in this mutation.
func (m *FnetDocumentMutation) AddedFnetID() (r int, exists bool) {
	v := m.addfnet_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFnetID resets all changes to the "fnet_id" field.
func (m *FnetDocumentMutation) ResetFnetID() {
	m.fnet_id = nil
	m.addfnet_id = nil
}

// SetAdditionalInformation sets the "additional_information" field.
func (m *FnetDocumentMutation) SetAdditionalInformation(s string) {
	m.additional_information = &s
}

// AdditionalInformation returns the value of the "additional_information" field in the mutation.
func (m *FnetDocumentMutation) AdditionalInformation() (r string, exists bool) {
	v := m.additional_information
	if v == nil {
		return
	}
	return *v, true
}

// OldAdditionalInformation returns the old "additional_information" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldAdditionalInformation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdditionalInformation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdditionalInformation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdditionalInformation: %w", err)
	}
	return oldValue.AdditionalInformation, nil
}

// ClearAdditionalInformation clears the value of the "additional_information" field.
func (m *FnetDocumentMutation) ClearAdditionalInformation() {
	m.additional_information = nil
	m.clearedFields[fnetdocument.FieldAdditionalInformation] = struct{}{}
}

// AdditionalInformationCleared returns if the "additional_information" field was cleared in this mutation.
func (m *FnetDocumentMutation) AdditionalInformationCleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldAdditionalInformation]
	return ok
}

// ResetAdditionalInformation resets all changes to the "additional_information" field.
func (m *FnetDocumentMutation) ResetAdditionalInformation() {
	m.additional_information = nil
	delete(m.clearedFields, fnetdocument.FieldAdditionalInformation)
}

// SetDocumentCategory sets the "document_category" field.
func (m *FnetDocumentMutation) SetDocumentCategory(s string) {
	m.document_category = &s
}

// DocumentCategory returns the value of the "document_category" field in the mutation.
func (m *FnetDocumentMutation) DocumentCategory() (r string, exists bool) {
	v := m.document_category
	if v == nil {
		return
	}
	return *v, true
}

// OldDocumentCategory returns the old "document_category" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldDocumentCategory(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDocumentCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDocumentCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDocumentCategory: %w", err)
	}
	return oldValue.DocumentCategory, nil
}

// ResetDocumentCategory resets all changes to the "document_category" field.
func (m *FnetDocumentMutation) ResetDocumentCategory() {
	m.document_category = nil
}

// SetDocumentStatus sets the "document_status" field.
func (m *FnetDocumentMutation) SetDocumentStatus(s string) {
	m.document_status = &s
}

// DocumentStatus returns the value of the "document_status" field in the mutation.
func (m *FnetDocumentMutation) DocumentStatus() (r string, exists bool) {
	v := m.document_status
	if v == nil {
		return
	}
	return *v, true
}

// OldDocumentStatus returns the old "document_status" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldDocumentStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDocumentStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDocumentStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDocumentStatus: %w", err)
	}
	return oldValue.DocumentStatus, nil
}

// ResetDocumentStatus resets all changes to the "document_status" field.
func (m *FnetDocumentMutation) ResetDocumentStatus() {
	m.document_status = nil
}

// SetDocumentSubCategory1 sets the "document_sub_category1" field.
func (m *FnetDocumentMutation) SetDocumentSubCategory1(s string) {
	m.document_sub_category1 = &s
}

// DocumentSubCategory1 returns the value of the "document_sub_category1" field in the mutation.
func (m *FnetDocumentMutation) DocumentSubCategory1() (r string, exists bool) {
	v := m.document_sub_category1
	if v == nil {
		return
	}
	return *v, true
}

// OldDocumentSubCategory1 returns the old "document_sub_category1" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldDocumentSubCategory1(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDocumentSubCategory1 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDocumentSubCategory1 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDocumentSubCategory1: %w", err)
	}
	return oldValue.DocumentSubCategory1, nil
}

// ClearDocumentSubCategory1 clears the value of the "document_sub_category1" field.
func (m *FnetDocumentMutation) ClearDocumentSubCategory1() {
	m.document_sub_category1 = nil
	m.clearedFields[fnetdocument.FieldDocumentSubCategory1] = struct{}{}
}

// DocumentSubCategory1Cleared returns if the "document_sub_category1" field was cleared in this mutation.
func (m *FnetDocumentMutation) DocumentSubCategory1Cleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldDocumentSubCategory1]
	return ok
}

// ResetDocumentSubCategory1 resets all changes to the "document_sub_category1" field.
func (m *FnetDocumentMutation) ResetDocumentSubCategory1() {
	m.document_sub_category1 = nil
	delete(m.clearedFields, fnetdocument.FieldDocumentSubCategory1)
}

// SetDocumentSubCategory2 sets the "document_sub_category2" field.
func (m *FnetDocumentMutation) SetDocumentSubCategory2(s string) {
	m.document_sub_category2 = &s
}

// DocumentSubCategory2 returns the value of the "document_sub_category2" field in the mutation.
func (m *FnetDocumentMutation) DocumentSubCategory2() (r string, exists bool) {
	v := m.document_sub_category2
	if v == nil {
		return
	}
	return *v, true
}

// OldDocumentSubCategory2 returns the old "document_sub_category2" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldDocumentSubCategory2(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDocumentSubCategory2 is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDocumentSubCategory2 requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDocumentSubCategory2: %w", err)
	}
	return oldValue.DocumentSubCategory2, nil
}

// ClearDocumentSubCategory2 clears the value of the "document_sub_category2" field.
func (m *FnetDocumentMutation) ClearDocumentSubCategory2() {
	m.document_sub_category2 = nil
	m.clearedFields[fnetdocument.FieldDocumentSubCategory2] = struct{}{}
}

// DocumentSubCategory2Cleared returns if the "document_sub_category2" field was cleared in this mutation.
func (m *FnetDocumentMutation) DocumentSubCategory2Cleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldDocumentSubCategory2]
	return ok
}

// ResetDocumentSubCategory2 resets all changes to the "document_sub_category2" field.
func (m *FnetDocumentMutation) ResetDocumentSubCategory2() {
	m.document_sub_category2 = nil
	delete(m.clearedFields, fnetdocument.FieldDocumentSubCategory2)
}

// SetFundDescription sets the "fund_description" field.
func (m *FnetDocumentMutation) SetFundDescription(s string) {
	m.fund_description = &s
}

// FundDescription returns the value of the "fund_description" field in the mutation.
func (m *FnetDocumentMutation) FundDescription() (r string, exists bool) {
	v := m.fund_description
	if v == nil {
		return
	}
	return *v, true
}

// OldFundDescription returns the old "fund_description" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldFundDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFundDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFundDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFundDescription: %w", err)
	}
	return oldValue.FundDescription, nil
}

// ResetFundDescription resets all changes to the "fund_description" field.
func (m *FnetDocumentMutation) ResetFundDescription() {
	m.fund_description = nil
}

// SetHighPriority sets the "high_priority" field.
func (m *FnetDocumentMutation) SetHighPriority(b bool) {
	m.high_priority = &b
}

// HighPriority returns the value of the "high_priority" field in the mutation.
func (m *FnetDocumentMutation) HighPriority() (r bool, exists bool) {
	v := m.high_priority
	if v == nil {
		return
	}
	return *v, true
}

// OldHighPriority returns the old "high_priority" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldHighPriority(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHighPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHighPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHighPriority: %w", err)
	}
	return oldValue.HighPriority, nil
}

// ResetHighPriority resets all changes to the "high_priority" field.
func (m *FnetDocumentMutation) ResetHighPriority() {
	m.high_priority = nil
}

// SetMarketName sets the "market_name" field.
func (m *FnetDocumentMutation) SetMarketName(s string) {
	m.market_name = &s
}

// MarketName returns the value of the "market_name" field in the mutation.
func (m *FnetDocumentMutation) MarketName() (r string, exists bool) {
	v := m.market_name
	if v == nil {
		return
	}
	return *v, true
}

// OldMarketName returns the old "market_name" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldMarketName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMarketName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMarketName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMarketName: %w", err)
	}
	return oldValue.MarketName, nil
}

// ClearMarketName clears the value of the "market_name" field.
func (m *FnetDocumentMutation) ClearMarketName() {
	m.market_name = nil
	m.clearedFields[fnetdocument.FieldMarketName] = struct{}{}
}

// MarketNameCleared returns if the "market_name" field was cleared in this mutation.
func (m *FnetDocumentMutation) MarketNameCleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldMarketName]
	return ok
}

// ResetMarketName resets all changes to the "market_name" field.
func (m *FnetDocumentMutation) ResetMarketName() {
	m.market_name = nil
	delete(m.clearedFields, fnetdocument.FieldMarketName)
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (m *FnetDocumentMutation) SetReferenceDateFormat(s string) {
	m.reference_date_format = &s
}

// ReferenceDateFormat returns the value of the "reference_date_format" field in the mutation.
func (m *FnetDocumentMutation) ReferenceDateFormat() (r string, exists bool) {
	v := m.reference_date_format
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceDateFormat returns the old "reference_date_format" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldReferenceDateFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceDateFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceDateFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceDateFormat: %w", err)
	}
	return oldValue.ReferenceDateFormat, nil
}

// ResetReferenceDateFormat resets all changes to the "reference_date_format" field.
func (m *FnetDocumentMutation) ResetReferenceDateFormat() {
	m.reference_date_format = nil
}

// SetReferenceDate sets the "reference_date" field.
func (m *FnetDocumentMutation) SetReferenceDate(s string) {
	m.reference_date = &s
}

// ReferenceDate returns the value of the "reference_date" field in the mutation.
func (m *FnetDocumentMutation) ReferenceDate() (r string, exists bool) {
	v := m.reference_date
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceDate returns the old "reference_date" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldReferenceDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceDate: %w", err)
	}
	return oldValue.ReferenceDate, nil
}

// ResetReferenceDate resets all changes to the "reference_date" field.
func (m *FnetDocumentMutation) ResetReferenceDate() {
	m.reference_date = nil
}

// SetReviewed sets the "reviewed" field.
func (m *FnetDocumentMutation) SetReviewed(s string) {
	m.reviewed = &s
}

// Reviewed returns the value of the "reviewed" field in the mutation.
func (m *FnetDocumentMutation) Reviewed() (r string, exists bool) {
	v := m.reviewed
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewed returns the old "reviewed" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldReviewed(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewed: %w", err)
	}
	return oldValue.Reviewed, nil
}

// ResetReviewed resets all changes to the "reviewed" field.
func (m *FnetDocumentMutation) ResetReviewed() {
	m.reviewed = nil
}

// SetStatusDescription sets the "status_description" field.
func (m *FnetDocumentMutation) SetStatusDescription(s string) {
	m.status_description = &s
}

// StatusDescription returns the value of the "status_description" field in the mutation.
func (m *FnetDocumentMutation) StatusDescription() (r string, exists bool) {
	v := m.status_description
	if v == nil {
		return
	}
	return *v, true
}

// OldStatusDescription returns the old "status_description" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldStatusDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatusDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatusDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatusDescription: %w", err)
	}
	return oldValue.StatusDescription, nil
}

// ResetStatusDescription resets all changes to the "status_description" field.
func (m *FnetDocumentMutation) ResetStatusDescription() {
	m.status_description = nil
}

// SetStatus sets the "status" field.
func (m *FnetDocumentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *FnetDocumentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FnetDocumentMutation) ResetStatus() {
	m.status = nil
}

// SetSubmissionDate sets the "submission_date" field.
func (m *FnetDocumentMutation) SetSubmissionDate(s string) {
	m.submission_date = &s
}

// SubmissionDate returns the value of the "submission_date" field in the mutation.
func (m *FnetDocumentMutation) SubmissionDate() (r string, exists bool) {
	v := m.submission_date
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionDate returns the old "submission_date" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionDate: %w", err)
	}
	return oldValue.SubmissionDate, nil
}

// ResetSubmissionDate resets all changes to the "submission_date" field.
func (m *FnetDocumentMutation) ResetSubmissionDate() {
	m.submission_date = nil
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (m *FnetDocumentMutation) SetSubmissionMethodDescription(s string) {
	m.submission_method_description = &s
}

// SubmissionMethodDescription returns the value of the "submission_method_description" field in the mutation.
func (m *FnetDocumentMutation) SubmissionMethodDescription() (r string, exists bool) {
	v := m.submission_method_description
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionMethodDescription returns the old "submission_method_description" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionMethodDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionMethodDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionMethodDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionMethodDescription: %w", err)
	}
	return oldValue.SubmissionMethodDescription, nil
}

// ResetSubmissionMethodDescription resets all changes to the "submission_method_description" field.
func (m *FnetDocumentMutation) ResetSubmissionMethodDescription() {
	m.submission_method_description = nil
}

// SetSubmissionMethod sets the "submission_method" field.
func (m *FnetDocumentMutation) SetSubmissionMethod(s string) {
	m.submission_method = &s
}

// SubmissionMethod returns the value of the "submission_method" field in the mutation.
func (m *FnetDocumentMutation) SubmissionMethod() (r string, exists bool) {
	v := m.submission_method
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionMethod returns the old "submission_method" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionMethod: %w", err)
	}
	return oldValue.SubmissionMethod, nil
}

// ResetSubmissionMethod resets all changes to the "submission_method" field.
func (m *FnetDocumentMutation) ResetSubmissionMethod() {
	m.submission_method = nil
}

// SetVersion sets the "version" field.
func (m *FnetDocumentMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *FnetDocumentMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *FnetDocumentMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *FnetDocumentMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *FnetDocumentMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// Where appends a list predicates to the FnetDocumentMutation builder.
func (m *FnetDocumentMutation) Where(ps ...predicate.FnetDocument) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *FnetDocumentMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (FnetDocument).
func (m *FnetDocumentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FnetDocumentMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.fnet_id != nil {
		fields = append(fields, fnetdocument.FieldFnetID)
	}
	if m.additional_information != nil {
		fields = append(fields, fnetdocument.FieldAdditionalInformation)
	}
	if m.document_category != nil {
		fields = append(fields, fnetdocument.FieldDocumentCategory)
	}
	if m.document_status != nil {
		fields = append(fields, fnetdocument.FieldDocumentStatus)
	}
	if m.document_sub_category1 != nil {
		fields = append(fields, fnetdocument.FieldDocumentSubCategory1)
	}
	if m.document_sub_category2 != nil {
		fields = append(fields, fnetdocument.FieldDocumentSubCategory2)
	}
	if m.fund_description != nil {
		fields = append(fields, fnetdocument.FieldFundDescription)
	}
	if m.high_priority != nil {
		fields = append(fields, fnetdocument.FieldHighPriority)
	}
	if m.market_name != nil {
		fields = append(fields, fnetdocument.FieldMarketName)
	}
	if m.reference_date_format != nil {
		fields = append(fields, fnetdocument.FieldReferenceDateFormat)
	}
	if m.reference_date != nil {
		fields = append(fields, fnetdocument.FieldReferenceDate)
	}
	if m.reviewed != nil {
		fields = append(fields, fnetdocument.FieldReviewed)
	}
	if m.status_description != nil {
		fields = append(fields, fnetdocument.FieldStatusDescription)
	}
	if m.status != nil {
		fields = append(fields, fnetdocument.FieldStatus)
	}
	if m.submission_date != nil {
		fields = append(fields, fnetdocument.FieldSubmissionDate)
	}
	if m.submission_method_description != nil {
		fields = append(fields, fnetdocument.FieldSubmissionMethodDescription)
	}
	if m.submission_method != nil {
		fields = append(fields, fnetdocument.FieldSubmissionMethod)
	}
	if m.version != nil {
		fields = append(fields, fnetdocument.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FnetDocumentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fnetdocument.FieldFnetID:
		return m.FnetID()
	case fnetdocument.FieldAdditionalInformation:
		return m.AdditionalInformation()
	case fnetdocument.FieldDocumentCategory:
		return m.DocumentCategory()
	case fnetdocument.FieldDocumentStatus:
		return m.DocumentStatus()
	case fnetdocument.FieldDocumentSubCategory1:
		return m.DocumentSubCategory1()
	case fnetdocument.FieldDocumentSubCategory2:
		return m.DocumentSubCategory2()
	case fnetdocument.FieldFundDescription:
		return m.FundDescription()
	case fnetdocument.FieldHighPriority:
		return m.HighPriority()
	case fnetdocument.FieldMarketName:
		return m.MarketName()
	case fnetdocument.FieldReferenceDateFormat:
		return m.ReferenceDateFormat()
	case fnetdocument.FieldReferenceDate:
		return m.ReferenceDate()
	case fnetdocument.FieldReviewed:
		return m.Reviewed()
	case fnetdocument.FieldStatusDescription:
		return m.StatusDescription()
	case fnetdocument.FieldStatus:
		return m.Status()
	case fnetdocument.FieldSubmissionDate:
		return m.SubmissionDate()
	case fnetdocument.FieldSubmissionMethodDescription:
		return m.SubmissionMethodDescription()
	case fnetdocument.FieldSubmissionMethod:
		return m.SubmissionMethod()
	case fnetdocument.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FnetDocumentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fnetdocument.FieldFnetID:
		return m.OldFnetID(ctx)
	case fnetdocument.FieldAdditionalInformation:
		return m.OldAdditionalInformation(ctx)
	case fnetdocument.FieldDocumentCategory:
		return m.OldDocumentCategory(ctx)
	case fnetdocument.FieldDocumentStatus:
		return m.OldDocumentStatus(ctx)
	case fnetdocument.FieldDocumentSubCategory1:
		return m.OldDocumentSubCategory1(ctx)
	case fnetdocument.FieldDocumentSubCategory2:
		return m.OldDocumentSubCategory2(ctx)
	case fnetdocument.FieldFundDescription:
		return m.OldFundDescription(ctx)
	case fnetdocument.FieldHighPriority:
		return m.OldHighPriority(ctx)
	case fnetdocument.FieldMarketName:
		return m.OldMarketName(ctx)
	case fnetdocument.FieldReferenceDateFormat:
		return m.OldReferenceDateFormat(ctx)
	case fnetdocument.FieldReferenceDate:
		return m.OldReferenceDate(ctx)
	case fnetdocument.FieldReviewed:
		return m.OldReviewed(ctx)
	case fnetdocument.FieldStatusDescription:
		return m.OldStatusDescription(ctx)
	case fnetdocument.FieldStatus:
		return m.OldStatus(ctx)
	case fnetdocument.FieldSubmissionDate:
		return m.OldSubmissionDate(ctx)
	case fnetdocument.FieldSubmissionMethodDescription:
		return m.OldSubmissionMethodDescription(ctx)
	case fnetdocument.FieldSubmissionMethod:
		return m.OldSubmissionMethod(ctx)
	case fnetdocument.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown FnetDocument field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetDocumentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fnetdocument.FieldFnetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFnetID(v)
		return nil
	case fnetdocument.FieldAdditionalInformation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdditionalInformation(v)
		return nil
	case fnetdocument.FieldDocumentCategory:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDocumentCategory(v)
		return nil
	case fnetdocument.FieldDocumentStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDocumentStatus(v)
		return nil
	case fnetdocument.FieldDocumentSubCategory1:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDocumentSubCategory1(v)
		return nil
	case fnetdocument.FieldDocumentSubCategory2:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDocumentSubCategory2(v)
		return nil
	case fnetdocument.FieldFundDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFundDescription(v)
		return nil
	case fnetdocument.FieldHighPriority:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHighPriority(v)
		return nil
	case fnetdocument.FieldMarketName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMarketName(v)
		return nil
	case fnetdocument.FieldReferenceDateFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceDateFormat(v)
		return nil
	case fnetdocument.FieldReferenceDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceDate(v)
		return nil
	case fnetdocument.FieldReviewed:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewed(v)
		return nil
	case fnetdocument.FieldStatusDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatusDescription(v)
		return nil
	case fnetdocument.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case fnetdocument.FieldSubmissionDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionDate(v)
		return nil
	case fnetdocument.FieldSubmissionMethodDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionMethodDescription(v)
		return nil
	case fnetdocument.FieldSubmissionMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionMethod(v)
		return nil
	case fnetdocument.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown FnetDocument field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FnetDocumentMutation) AddedFields() []string {
	var fields []string
	if m.addfnet_id != nil {
		fields = append(fields, fnetdocument.FieldFnetID)
	}
	if m.addversion != nil {
		fields = append(fields, fnetdocument.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FnetDocumentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fnetdocument.FieldFnetID:
		return m.AddedFnetID()
	case fnetdocument.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetDocumentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fnetdocument.FieldFnetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFnetID(v)
		return nil
	case fnetdocument.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown FnetDocument numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FnetDocumentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fnetdocument.FieldAdditionalInformation) {
		fields = append(fields, fnetdocument.FieldAdditionalInformation)
	}
	if m.FieldCleared(fnetdocument.FieldDocumentSubCategory1) {
		fields = append(fields, fnetdocument.FieldDocumentSubCategory1)
	}
	if m.FieldCleared(fnetdocument.FieldDocumentSubCategory2) {
		fields = append(fields, fnetdocument.FieldDocumentSubCategory2)
	}
	if m.FieldCleared(fnetdocument.FieldMarketName) {
		fields = append(fields, fnetdocument.FieldMarketName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FnetDocumentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FnetDocumentMutation) ClearField(name string) error {
	switch name {
	case fnetdocument.FieldAdditionalInformation:
		m.ClearAdditionalInformation()
		return nil
	case fnetdocument.FieldDocumentSubCategory1:
		m.ClearDocumentSubCategory1()
		return nil
	case fnetdocument.FieldDocumentSubCategory2:
		m.ClearDocumentSubCategory2()
		return nil
	case fnetdocument.FieldMarketName:
		m.ClearMarketName()
		return nil
	}
	return fmt.Errorf("unknown FnetDocument nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FnetDocumentMutation) ResetField(name string) error {
	switch name {
	case fnetdocument.FieldFnetID:
		m.ResetFnetID()
		return nil
	case fnetdocument.FieldAdditionalInformation:
		m.ResetAdditionalInformation()
		return nil
	case fnetdocument.FieldDocumentCategory:
		m.ResetDocumentCategory()
		return nil
	case fnetdocument.FieldDocumentStatus:
		m.ResetDocumentStatus()
		return nil
	case fnetdocument.FieldDocumentSubCategory1:
		m.ResetDocumentSubCategory1()
		return nil
	case fnetdocument.FieldDocumentSubCategory2:
		m.ResetDocumentSubCategory2()
		return nil
	case fnetdocument.FieldFundDescription:
		m.ResetFundDescription()
		return nil
	case fnetdocument.FieldHighPriority:
		m.ResetHighPriority()
		return nil
	case fnetdocument.FieldMarketName:
		m.ResetMarketName()
		return nil
	case fnetdocument.FieldReferenceDateFormat:
		m.ResetReferenceDateFormat()
		return nil
	case fnetdocument.FieldReferenceDate:
		m.ResetReferenceDate()
		return nil
	case fnetdocument.FieldReviewed:
		m.ResetReviewed()
		return nil
	case fnetdocument.FieldStatusDescription:
		m.ResetStatusDescription()
		return nil
	case fnetdocument.FieldStatus:
		m.ResetStatus()
		return nil
	case fnetdocument.FieldSubmissionDate:
		m.ResetSubmissionDate()
		return nil
	case fnetdocument.FieldSubmissionMethodDescription:
		m.ResetSubmissionMethodDescription()
		return nil
	case fnetdocument.FieldSubmissionMethod:
		m.ResetSubmissionMethod()
		return nil
	case fnetdocument.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown FnetDocument field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FnetDocumentMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FnetDocumentMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FnetDocumentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FnetDocumentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FnetDocumentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FnetDocumentMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FnetDocumentMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown FnetDocument unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FnetDocumentMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown FnetDocument edge %s", name)
}
