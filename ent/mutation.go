// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lenon/gofii/ent/fnetcategory"
	"github.com/lenon/gofii/ent/fnetdocument"
	"github.com/lenon/gofii/ent/fnetsubcategory1"
	"github.com/lenon/gofii/ent/fnetsubcategory2"
	"github.com/lenon/gofii/ent/predicate"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeFnetCategory     = "FnetCategory"
	TypeFnetDocument     = "FnetDocument"
	TypeFnetSubCategory1 = "FnetSubCategory1"
	TypeFnetSubCategory2 = "FnetSubCategory2"
)

// FnetCategoryMutation represents an operation that mutates the FnetCategory nodes in the graph.
type FnetCategoryMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	documents        map[int]struct{}
	removeddocuments map[int]struct{}
	cleareddocuments bool
	done             bool
	oldValue         func(context.Context) (*FnetCategory, error)
	predicates       []predicate.FnetCategory
}

var _ ent.Mutation = (*FnetCategoryMutation)(nil)

// fnetcategoryOption allows management of the mutation configuration using functional options.
type fnetcategoryOption func(*FnetCategoryMutation)

// newFnetCategoryMutation creates new mutation for the FnetCategory entity.
func newFnetCategoryMutation(c config, op Op, opts ...fnetcategoryOption) *FnetCategoryMutation {
	m := &FnetCategoryMutation{
		config:        c,
		op:            op,
		typ:           TypeFnetCategory,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFnetCategoryID sets the ID field of the mutation.
func withFnetCategoryID(id int) fnetcategoryOption {
	return func(m *FnetCategoryMutation) {
		var (
			err   error
			once  sync.Once
			value *FnetCategory
		)
		m.oldValue = func(ctx context.Context) (*FnetCategory, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FnetCategory.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFnetCategory sets the old FnetCategory of the mutation.
func withFnetCategory(node *FnetCategory) fnetcategoryOption {
	return func(m *FnetCategoryMutation) {
		m.oldValue = func(context.Context) (*FnetCategory, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FnetCategoryMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FnetCategoryMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FnetCategoryMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FnetCategoryMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FnetCategory.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FnetCategoryMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FnetCategoryMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FnetCategory entity.
// If the FnetCategory object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetCategoryMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FnetCategoryMutation) ResetName() {
	m.name = nil
}

// AddDocumentIDs adds the "documents" edge to the FnetDocument entity by ids.
func (m *FnetCategoryMutation) AddDocumentIDs(ids ...int) {
	if m.documents == nil {
		m.documents = make(map[int]struct{})
	}
	for i := range ids {
		m.documents[ids[i]] = struct{}{}
	}
}

// ClearDocuments clears the "documents" edge to the FnetDocument entity.
func (m *FnetCategoryMutation) ClearDocuments() {
	m.cleareddocuments = true
}

// DocumentsCleared reports if the "documents" edge to the FnetDocument entity was cleared.
func (m *FnetCategoryMutation) DocumentsCleared() bool {
	return m.cleareddocuments
}

// RemoveDocumentIDs removes the "documents" edge to the FnetDocument entity by IDs.
func (m *FnetCategoryMutation) RemoveDocumentIDs(ids ...int) {
	if m.removeddocuments == nil {
		m.removeddocuments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.documents, ids[i])
		m.removeddocuments[ids[i]] = struct{}{}
	}
}

// RemovedDocuments returns the removed IDs of the "documents" edge to the FnetDocument entity.
func (m *FnetCategoryMutation) RemovedDocumentsIDs() (ids []int) {
	for id := range m.removeddocuments {
		ids = append(ids, id)
	}
	return
}

// DocumentsIDs returns the "documents" edge IDs in the mutation.
func (m *FnetCategoryMutation) DocumentsIDs() (ids []int) {
	for id := range m.documents {
		ids = append(ids, id)
	}
	return
}

// ResetDocuments resets all changes to the "documents" edge.
func (m *FnetCategoryMutation) ResetDocuments() {
	m.documents = nil
	m.cleareddocuments = false
	m.removeddocuments = nil
}

// Where appends a list predicates to the FnetCategoryMutation builder.
func (m *FnetCategoryMutation) Where(ps ...predicate.FnetCategory) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FnetCategoryMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FnetCategoryMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FnetCategory, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FnetCategoryMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FnetCategoryMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FnetCategory).
func (m *FnetCategoryMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FnetCategoryMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, fnetcategory.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FnetCategoryMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fnetcategory.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FnetCategoryMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fnetcategory.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown FnetCategory field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetCategoryMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fnetcategory.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown FnetCategory field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FnetCategoryMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FnetCategoryMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetCategoryMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FnetCategory numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FnetCategoryMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FnetCategoryMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FnetCategoryMutation) ClearField(name string) error {
	return fmt.Errorf("unknown FnetCategory nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FnetCategoryMutation) ResetField(name string) error {
	switch name {
	case fnetcategory.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown FnetCategory field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FnetCategoryMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.documents != nil {
		edges = append(edges, fnetcategory.EdgeDocuments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FnetCategoryMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fnetcategory.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.documents))
		for id := range m.documents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FnetCategoryMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddocuments != nil {
		edges = append(edges, fnetcategory.EdgeDocuments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FnetCategoryMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case fnetcategory.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.removeddocuments))
		for id := range m.removeddocuments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FnetCategoryMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddocuments {
		edges = append(edges, fnetcategory.EdgeDocuments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FnetCategoryMutation) EdgeCleared(name string) bool {
	switch name {
	case fnetcategory.EdgeDocuments:
		return m.cleareddocuments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FnetCategoryMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FnetCategory unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FnetCategoryMutation) ResetEdge(name string) error {
	switch name {
	case fnetcategory.EdgeDocuments:
		m.ResetDocuments()
		return nil
	}
	return fmt.Errorf("unknown FnetCategory edge %s", name)
}

// FnetDocumentMutation represents an operation that mutates the FnetDocument nodes in the graph.
type FnetDocumentMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	fnet_id                       *int
	addfnet_id                    *int
	additional_information        *string
	category_str                  *string
	fund_description              *string
	fund_market_name              *string
	high_priority                 *bool
	reference_date                *time.Time
	reference_date_format         *string
	reference_date_str            *string
	reviewed                      *string
	status                        *string
	sub_category1_str             *string
	sub_category2_str             *string
	submission_date               *time.Time
	submission_date_str           *string
	submission_method             *string
	submission_method_description *string
	submission_status             *string
	submission_status_description *string
	version                       *int
	addversion                    *int
	clearedFields                 map[string]struct{}
	category                      *int
	clearedcategory               bool
	sub_category1                 *int
	clearedsub_category1          bool
	sub_category2                 *int
	clearedsub_category2          bool
	done                          bool
	oldValue                      func(context.Context) (*FnetDocument, error)
	predicates                    []predicate.FnetDocument
}

var _ ent.Mutation = (*FnetDocumentMutation)(nil)

// fnetdocumentOption allows management of the mutation configuration using functional options.
type fnetdocumentOption func(*FnetDocumentMutation)

// newFnetDocumentMutation creates new mutation for the FnetDocument entity.
func newFnetDocumentMutation(c config, op Op, opts ...fnetdocumentOption) *FnetDocumentMutation {
	m := &FnetDocumentMutation{
		config:        c,
		op:            op,
		typ:           TypeFnetDocument,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFnetDocumentID sets the ID field of the mutation.
func withFnetDocumentID(id int) fnetdocumentOption {
	return func(m *FnetDocumentMutation) {
		var (
			err   error
			once  sync.Once
			value *FnetDocument
		)
		m.oldValue = func(ctx context.Context) (*FnetDocument, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FnetDocument.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFnetDocument sets the old FnetDocument of the mutation.
func withFnetDocument(node *FnetDocument) fnetdocumentOption {
	return func(m *FnetDocumentMutation) {
		m.oldValue = func(context.Context) (*FnetDocument, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FnetDocumentMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FnetDocumentMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FnetDocumentMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FnetDocumentMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FnetDocument.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetFnetID sets the "fnet_id" field.
func (m *FnetDocumentMutation) SetFnetID(i int) {
	m.fnet_id = &i
	m.addfnet_id = nil
}

// FnetID returns the value of the "fnet_id" field in the mutation.
func (m *FnetDocumentMutation) FnetID() (r int, exists bool) {
	v := m.fnet_id
	if v == nil {
		return
	}
	return *v, true
}

// OldFnetID returns the old "fnet_id" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldFnetID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFnetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFnetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFnetID: %w", err)
	}
	return oldValue.FnetID, nil
}

// AddFnetID adds i to the "fnet_id" field.
func (m *FnetDocumentMutation) AddFnetID(i int) {
	if m.addfnet_id != nil {
		*m.addfnet_id += i
	} else {
		m.addfnet_id = &i
	}
}

// AddedFnetID returns the value that was added to the "fnet_id" field in this mutation.
func (m *FnetDocumentMutation) AddedFnetID() (r int, exists bool) {
	v := m.addfnet_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetFnetID resets all changes to the "fnet_id" field.
func (m *FnetDocumentMutation) ResetFnetID() {
	m.fnet_id = nil
	m.addfnet_id = nil
}

// SetAdditionalInformation sets the "additional_information" field.
func (m *FnetDocumentMutation) SetAdditionalInformation(s string) {
	m.additional_information = &s
}

// AdditionalInformation returns the value of the "additional_information" field in the mutation.
func (m *FnetDocumentMutation) AdditionalInformation() (r string, exists bool) {
	v := m.additional_information
	if v == nil {
		return
	}
	return *v, true
}

// OldAdditionalInformation returns the old "additional_information" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldAdditionalInformation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAdditionalInformation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAdditionalInformation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAdditionalInformation: %w", err)
	}
	return oldValue.AdditionalInformation, nil
}

// ClearAdditionalInformation clears the value of the "additional_information" field.
func (m *FnetDocumentMutation) ClearAdditionalInformation() {
	m.additional_information = nil
	m.clearedFields[fnetdocument.FieldAdditionalInformation] = struct{}{}
}

// AdditionalInformationCleared returns if the "additional_information" field was cleared in this mutation.
func (m *FnetDocumentMutation) AdditionalInformationCleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldAdditionalInformation]
	return ok
}

// ResetAdditionalInformation resets all changes to the "additional_information" field.
func (m *FnetDocumentMutation) ResetAdditionalInformation() {
	m.additional_information = nil
	delete(m.clearedFields, fnetdocument.FieldAdditionalInformation)
}

// SetCategoryStr sets the "category_str" field.
func (m *FnetDocumentMutation) SetCategoryStr(s string) {
	m.category_str = &s
}

// CategoryStr returns the value of the "category_str" field in the mutation.
func (m *FnetDocumentMutation) CategoryStr() (r string, exists bool) {
	v := m.category_str
	if v == nil {
		return
	}
	return *v, true
}

// OldCategoryStr returns the old "category_str" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldCategoryStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategoryStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategoryStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategoryStr: %w", err)
	}
	return oldValue.CategoryStr, nil
}

// ResetCategoryStr resets all changes to the "category_str" field.
func (m *FnetDocumentMutation) ResetCategoryStr() {
	m.category_str = nil
}

// SetFundDescription sets the "fund_description" field.
func (m *FnetDocumentMutation) SetFundDescription(s string) {
	m.fund_description = &s
}

// FundDescription returns the value of the "fund_description" field in the mutation.
func (m *FnetDocumentMutation) FundDescription() (r string, exists bool) {
	v := m.fund_description
	if v == nil {
		return
	}
	return *v, true
}

// OldFundDescription returns the old "fund_description" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldFundDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFundDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFundDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFundDescription: %w", err)
	}
	return oldValue.FundDescription, nil
}

// ResetFundDescription resets all changes to the "fund_description" field.
func (m *FnetDocumentMutation) ResetFundDescription() {
	m.fund_description = nil
}

// SetFundMarketName sets the "fund_market_name" field.
func (m *FnetDocumentMutation) SetFundMarketName(s string) {
	m.fund_market_name = &s
}

// FundMarketName returns the value of the "fund_market_name" field in the mutation.
func (m *FnetDocumentMutation) FundMarketName() (r string, exists bool) {
	v := m.fund_market_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFundMarketName returns the old "fund_market_name" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldFundMarketName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFundMarketName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFundMarketName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFundMarketName: %w", err)
	}
	return oldValue.FundMarketName, nil
}

// ClearFundMarketName clears the value of the "fund_market_name" field.
func (m *FnetDocumentMutation) ClearFundMarketName() {
	m.fund_market_name = nil
	m.clearedFields[fnetdocument.FieldFundMarketName] = struct{}{}
}

// FundMarketNameCleared returns if the "fund_market_name" field was cleared in this mutation.
func (m *FnetDocumentMutation) FundMarketNameCleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldFundMarketName]
	return ok
}

// ResetFundMarketName resets all changes to the "fund_market_name" field.
func (m *FnetDocumentMutation) ResetFundMarketName() {
	m.fund_market_name = nil
	delete(m.clearedFields, fnetdocument.FieldFundMarketName)
}

// SetHighPriority sets the "high_priority" field.
func (m *FnetDocumentMutation) SetHighPriority(b bool) {
	m.high_priority = &b
}

// HighPriority returns the value of the "high_priority" field in the mutation.
func (m *FnetDocumentMutation) HighPriority() (r bool, exists bool) {
	v := m.high_priority
	if v == nil {
		return
	}
	return *v, true
}

// OldHighPriority returns the old "high_priority" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldHighPriority(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHighPriority is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHighPriority requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHighPriority: %w", err)
	}
	return oldValue.HighPriority, nil
}

// ResetHighPriority resets all changes to the "high_priority" field.
func (m *FnetDocumentMutation) ResetHighPriority() {
	m.high_priority = nil
}

// SetReferenceDate sets the "reference_date" field.
func (m *FnetDocumentMutation) SetReferenceDate(t time.Time) {
	m.reference_date = &t
}

// ReferenceDate returns the value of the "reference_date" field in the mutation.
func (m *FnetDocumentMutation) ReferenceDate() (r time.Time, exists bool) {
	v := m.reference_date
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceDate returns the old "reference_date" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldReferenceDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceDate: %w", err)
	}
	return oldValue.ReferenceDate, nil
}

// ResetReferenceDate resets all changes to the "reference_date" field.
func (m *FnetDocumentMutation) ResetReferenceDate() {
	m.reference_date = nil
}

// SetReferenceDateFormat sets the "reference_date_format" field.
func (m *FnetDocumentMutation) SetReferenceDateFormat(s string) {
	m.reference_date_format = &s
}

// ReferenceDateFormat returns the value of the "reference_date_format" field in the mutation.
func (m *FnetDocumentMutation) ReferenceDateFormat() (r string, exists bool) {
	v := m.reference_date_format
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceDateFormat returns the old "reference_date_format" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldReferenceDateFormat(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceDateFormat is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceDateFormat requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceDateFormat: %w", err)
	}
	return oldValue.ReferenceDateFormat, nil
}

// ResetReferenceDateFormat resets all changes to the "reference_date_format" field.
func (m *FnetDocumentMutation) ResetReferenceDateFormat() {
	m.reference_date_format = nil
}

// SetReferenceDateStr sets the "reference_date_str" field.
func (m *FnetDocumentMutation) SetReferenceDateStr(s string) {
	m.reference_date_str = &s
}

// ReferenceDateStr returns the value of the "reference_date_str" field in the mutation.
func (m *FnetDocumentMutation) ReferenceDateStr() (r string, exists bool) {
	v := m.reference_date_str
	if v == nil {
		return
	}
	return *v, true
}

// OldReferenceDateStr returns the old "reference_date_str" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldReferenceDateStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReferenceDateStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReferenceDateStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReferenceDateStr: %w", err)
	}
	return oldValue.ReferenceDateStr, nil
}

// ResetReferenceDateStr resets all changes to the "reference_date_str" field.
func (m *FnetDocumentMutation) ResetReferenceDateStr() {
	m.reference_date_str = nil
}

// SetReviewed sets the "reviewed" field.
func (m *FnetDocumentMutation) SetReviewed(s string) {
	m.reviewed = &s
}

// Reviewed returns the value of the "reviewed" field in the mutation.
func (m *FnetDocumentMutation) Reviewed() (r string, exists bool) {
	v := m.reviewed
	if v == nil {
		return
	}
	return *v, true
}

// OldReviewed returns the old "reviewed" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldReviewed(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldReviewed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldReviewed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldReviewed: %w", err)
	}
	return oldValue.Reviewed, nil
}

// ResetReviewed resets all changes to the "reviewed" field.
func (m *FnetDocumentMutation) ResetReviewed() {
	m.reviewed = nil
}

// SetStatus sets the "status" field.
func (m *FnetDocumentMutation) SetStatus(s string) {
	m.status = &s
}

// Status returns the value of the "status" field in the mutation.
func (m *FnetDocumentMutation) Status() (r string, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *FnetDocumentMutation) ResetStatus() {
	m.status = nil
}

// SetSubCategory1Str sets the "sub_category1_str" field.
func (m *FnetDocumentMutation) SetSubCategory1Str(s string) {
	m.sub_category1_str = &s
}

// SubCategory1Str returns the value of the "sub_category1_str" field in the mutation.
func (m *FnetDocumentMutation) SubCategory1Str() (r string, exists bool) {
	v := m.sub_category1_str
	if v == nil {
		return
	}
	return *v, true
}

// OldSubCategory1Str returns the old "sub_category1_str" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubCategory1Str(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubCategory1Str is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubCategory1Str requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubCategory1Str: %w", err)
	}
	return oldValue.SubCategory1Str, nil
}

// ClearSubCategory1Str clears the value of the "sub_category1_str" field.
func (m *FnetDocumentMutation) ClearSubCategory1Str() {
	m.sub_category1_str = nil
	m.clearedFields[fnetdocument.FieldSubCategory1Str] = struct{}{}
}

// SubCategory1StrCleared returns if the "sub_category1_str" field was cleared in this mutation.
func (m *FnetDocumentMutation) SubCategory1StrCleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldSubCategory1Str]
	return ok
}

// ResetSubCategory1Str resets all changes to the "sub_category1_str" field.
func (m *FnetDocumentMutation) ResetSubCategory1Str() {
	m.sub_category1_str = nil
	delete(m.clearedFields, fnetdocument.FieldSubCategory1Str)
}

// SetSubCategory2Str sets the "sub_category2_str" field.
func (m *FnetDocumentMutation) SetSubCategory2Str(s string) {
	m.sub_category2_str = &s
}

// SubCategory2Str returns the value of the "sub_category2_str" field in the mutation.
func (m *FnetDocumentMutation) SubCategory2Str() (r string, exists bool) {
	v := m.sub_category2_str
	if v == nil {
		return
	}
	return *v, true
}

// OldSubCategory2Str returns the old "sub_category2_str" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubCategory2Str(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubCategory2Str is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubCategory2Str requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubCategory2Str: %w", err)
	}
	return oldValue.SubCategory2Str, nil
}

// ClearSubCategory2Str clears the value of the "sub_category2_str" field.
func (m *FnetDocumentMutation) ClearSubCategory2Str() {
	m.sub_category2_str = nil
	m.clearedFields[fnetdocument.FieldSubCategory2Str] = struct{}{}
}

// SubCategory2StrCleared returns if the "sub_category2_str" field was cleared in this mutation.
func (m *FnetDocumentMutation) SubCategory2StrCleared() bool {
	_, ok := m.clearedFields[fnetdocument.FieldSubCategory2Str]
	return ok
}

// ResetSubCategory2Str resets all changes to the "sub_category2_str" field.
func (m *FnetDocumentMutation) ResetSubCategory2Str() {
	m.sub_category2_str = nil
	delete(m.clearedFields, fnetdocument.FieldSubCategory2Str)
}

// SetSubmissionDate sets the "submission_date" field.
func (m *FnetDocumentMutation) SetSubmissionDate(t time.Time) {
	m.submission_date = &t
}

// SubmissionDate returns the value of the "submission_date" field in the mutation.
func (m *FnetDocumentMutation) SubmissionDate() (r time.Time, exists bool) {
	v := m.submission_date
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionDate returns the old "submission_date" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionDate: %w", err)
	}
	return oldValue.SubmissionDate, nil
}

// ResetSubmissionDate resets all changes to the "submission_date" field.
func (m *FnetDocumentMutation) ResetSubmissionDate() {
	m.submission_date = nil
}

// SetSubmissionDateStr sets the "submission_date_str" field.
func (m *FnetDocumentMutation) SetSubmissionDateStr(s string) {
	m.submission_date_str = &s
}

// SubmissionDateStr returns the value of the "submission_date_str" field in the mutation.
func (m *FnetDocumentMutation) SubmissionDateStr() (r string, exists bool) {
	v := m.submission_date_str
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionDateStr returns the old "submission_date_str" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionDateStr(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionDateStr is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionDateStr requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionDateStr: %w", err)
	}
	return oldValue.SubmissionDateStr, nil
}

// ResetSubmissionDateStr resets all changes to the "submission_date_str" field.
func (m *FnetDocumentMutation) ResetSubmissionDateStr() {
	m.submission_date_str = nil
}

// SetSubmissionMethod sets the "submission_method" field.
func (m *FnetDocumentMutation) SetSubmissionMethod(s string) {
	m.submission_method = &s
}

// SubmissionMethod returns the value of the "submission_method" field in the mutation.
func (m *FnetDocumentMutation) SubmissionMethod() (r string, exists bool) {
	v := m.submission_method
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionMethod returns the old "submission_method" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionMethod(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionMethod is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionMethod requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionMethod: %w", err)
	}
	return oldValue.SubmissionMethod, nil
}

// ResetSubmissionMethod resets all changes to the "submission_method" field.
func (m *FnetDocumentMutation) ResetSubmissionMethod() {
	m.submission_method = nil
}

// SetSubmissionMethodDescription sets the "submission_method_description" field.
func (m *FnetDocumentMutation) SetSubmissionMethodDescription(s string) {
	m.submission_method_description = &s
}

// SubmissionMethodDescription returns the value of the "submission_method_description" field in the mutation.
func (m *FnetDocumentMutation) SubmissionMethodDescription() (r string, exists bool) {
	v := m.submission_method_description
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionMethodDescription returns the old "submission_method_description" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionMethodDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionMethodDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionMethodDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionMethodDescription: %w", err)
	}
	return oldValue.SubmissionMethodDescription, nil
}

// ResetSubmissionMethodDescription resets all changes to the "submission_method_description" field.
func (m *FnetDocumentMutation) ResetSubmissionMethodDescription() {
	m.submission_method_description = nil
}

// SetSubmissionStatus sets the "submission_status" field.
func (m *FnetDocumentMutation) SetSubmissionStatus(s string) {
	m.submission_status = &s
}

// SubmissionStatus returns the value of the "submission_status" field in the mutation.
func (m *FnetDocumentMutation) SubmissionStatus() (r string, exists bool) {
	v := m.submission_status
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionStatus returns the old "submission_status" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionStatus(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionStatus: %w", err)
	}
	return oldValue.SubmissionStatus, nil
}

// ResetSubmissionStatus resets all changes to the "submission_status" field.
func (m *FnetDocumentMutation) ResetSubmissionStatus() {
	m.submission_status = nil
}

// SetSubmissionStatusDescription sets the "submission_status_description" field.
func (m *FnetDocumentMutation) SetSubmissionStatusDescription(s string) {
	m.submission_status_description = &s
}

// SubmissionStatusDescription returns the value of the "submission_status_description" field in the mutation.
func (m *FnetDocumentMutation) SubmissionStatusDescription() (r string, exists bool) {
	v := m.submission_status_description
	if v == nil {
		return
	}
	return *v, true
}

// OldSubmissionStatusDescription returns the old "submission_status_description" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldSubmissionStatusDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSubmissionStatusDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSubmissionStatusDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubmissionStatusDescription: %w", err)
	}
	return oldValue.SubmissionStatusDescription, nil
}

// ResetSubmissionStatusDescription resets all changes to the "submission_status_description" field.
func (m *FnetDocumentMutation) ResetSubmissionStatusDescription() {
	m.submission_status_description = nil
}

// SetVersion sets the "version" field.
func (m *FnetDocumentMutation) SetVersion(i int) {
	m.version = &i
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *FnetDocumentMutation) Version() (r int, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the FnetDocument entity.
// If the FnetDocument object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetDocumentMutation) OldVersion(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVersion: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds i to the "version" field.
func (m *FnetDocumentMutation) AddVersion(i int) {
	if m.addversion != nil {
		*m.addversion += i
	} else {
		m.addversion = &i
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *FnetDocumentMutation) AddedVersion() (r int, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ResetVersion resets all changes to the "version" field.
func (m *FnetDocumentMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
}

// SetCategoryID sets the "category" edge to the FnetCategory entity by id.
func (m *FnetDocumentMutation) SetCategoryID(id int) {
	m.category = &id
}

// ClearCategory clears the "category" edge to the FnetCategory entity.
func (m *FnetDocumentMutation) ClearCategory() {
	m.clearedcategory = true
}

// CategoryCleared reports if the "category" edge to the FnetCategory entity was cleared.
func (m *FnetDocumentMutation) CategoryCleared() bool {
	return m.clearedcategory
}

// CategoryID returns the "category" edge ID in the mutation.
func (m *FnetDocumentMutation) CategoryID() (id int, exists bool) {
	if m.category != nil {
		return *m.category, true
	}
	return
}

// CategoryIDs returns the "category" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CategoryID instead. It exists only for internal usage by the builders.
func (m *FnetDocumentMutation) CategoryIDs() (ids []int) {
	if id := m.category; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCategory resets all changes to the "category" edge.
func (m *FnetDocumentMutation) ResetCategory() {
	m.category = nil
	m.clearedcategory = false
}

// SetSubCategory1ID sets the "sub_category1" edge to the FnetSubCategory1 entity by id.
func (m *FnetDocumentMutation) SetSubCategory1ID(id int) {
	m.sub_category1 = &id
}

// ClearSubCategory1 clears the "sub_category1" edge to the FnetSubCategory1 entity.
func (m *FnetDocumentMutation) ClearSubCategory1() {
	m.clearedsub_category1 = true
}

// SubCategory1Cleared reports if the "sub_category1" edge to the FnetSubCategory1 entity was cleared.
func (m *FnetDocumentMutation) SubCategory1Cleared() bool {
	return m.clearedsub_category1
}

// SubCategory1ID returns the "sub_category1" edge ID in the mutation.
func (m *FnetDocumentMutation) SubCategory1ID() (id int, exists bool) {
	if m.sub_category1 != nil {
		return *m.sub_category1, true
	}
	return
}

// SubCategory1IDs returns the "sub_category1" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubCategory1ID instead. It exists only for internal usage by the builders.
func (m *FnetDocumentMutation) SubCategory1IDs() (ids []int) {
	if id := m.sub_category1; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubCategory1 resets all changes to the "sub_category1" edge.
func (m *FnetDocumentMutation) ResetSubCategory1() {
	m.sub_category1 = nil
	m.clearedsub_category1 = false
}

// SetSubCategory2ID sets the "sub_category2" edge to the FnetSubCategory2 entity by id.
func (m *FnetDocumentMutation) SetSubCategory2ID(id int) {
	m.sub_category2 = &id
}

// ClearSubCategory2 clears the "sub_category2" edge to the FnetSubCategory2 entity.
func (m *FnetDocumentMutation) ClearSubCategory2() {
	m.clearedsub_category2 = true
}

// SubCategory2Cleared reports if the "sub_category2" edge to the FnetSubCategory2 entity was cleared.
func (m *FnetDocumentMutation) SubCategory2Cleared() bool {
	return m.clearedsub_category2
}

// SubCategory2ID returns the "sub_category2" edge ID in the mutation.
func (m *FnetDocumentMutation) SubCategory2ID() (id int, exists bool) {
	if m.sub_category2 != nil {
		return *m.sub_category2, true
	}
	return
}

// SubCategory2IDs returns the "sub_category2" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SubCategory2ID instead. It exists only for internal usage by the builders.
func (m *FnetDocumentMutation) SubCategory2IDs() (ids []int) {
	if id := m.sub_category2; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSubCategory2 resets all changes to the "sub_category2" edge.
func (m *FnetDocumentMutation) ResetSubCategory2() {
	m.sub_category2 = nil
	m.clearedsub_category2 = false
}

// Where appends a list predicates to the FnetDocumentMutation builder.
func (m *FnetDocumentMutation) Where(ps ...predicate.FnetDocument) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FnetDocumentMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FnetDocumentMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FnetDocument, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FnetDocumentMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FnetDocumentMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FnetDocument).
func (m *FnetDocumentMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FnetDocumentMutation) Fields() []string {
	fields := make([]string, 0, 20)
	if m.fnet_id != nil {
		fields = append(fields, fnetdocument.FieldFnetID)
	}
	if m.additional_information != nil {
		fields = append(fields, fnetdocument.FieldAdditionalInformation)
	}
	if m.category_str != nil {
		fields = append(fields, fnetdocument.FieldCategoryStr)
	}
	if m.fund_description != nil {
		fields = append(fields, fnetdocument.FieldFundDescription)
	}
	if m.fund_market_name != nil {
		fields = append(fields, fnetdocument.FieldFundMarketName)
	}
	if m.high_priority != nil {
		fields = append(fields, fnetdocument.FieldHighPriority)
	}
	if m.reference_date != nil {
		fields = append(fields, fnetdocument.FieldReferenceDate)
	}
	if m.reference_date_format != nil {
		fields = append(fields, fnetdocument.FieldReferenceDateFormat)
	}
	if m.reference_date_str != nil {
		fields = append(fields, fnetdocument.FieldReferenceDateStr)
	}
	if m.reviewed != nil {
		fields = append(fields, fnetdocument.FieldReviewed)
	}
	if m.status != nil {
		fields = append(fields, fnetdocument.FieldStatus)
	}
	if m.sub_category1_str != nil {
		fields = append(fields, fnetdocument.FieldSubCategory1Str)
	}
	if m.sub_category2_str != nil {
		fields = append(fields, fnetdocument.FieldSubCategory2Str)
	}
	if m.submission_date != nil {
		fields = append(fields, fnetdocument.FieldSubmissionDate)
	}
	if m.submission_date_str != nil {
		fields = append(fields, fnetdocument.FieldSubmissionDateStr)
	}
	if m.submission_method != nil {
		fields = append(fields, fnetdocument.FieldSubmissionMethod)
	}
	if m.submission_method_description != nil {
		fields = append(fields, fnetdocument.FieldSubmissionMethodDescription)
	}
	if m.submission_status != nil {
		fields = append(fields, fnetdocument.FieldSubmissionStatus)
	}
	if m.submission_status_description != nil {
		fields = append(fields, fnetdocument.FieldSubmissionStatusDescription)
	}
	if m.version != nil {
		fields = append(fields, fnetdocument.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FnetDocumentMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fnetdocument.FieldFnetID:
		return m.FnetID()
	case fnetdocument.FieldAdditionalInformation:
		return m.AdditionalInformation()
	case fnetdocument.FieldCategoryStr:
		return m.CategoryStr()
	case fnetdocument.FieldFundDescription:
		return m.FundDescription()
	case fnetdocument.FieldFundMarketName:
		return m.FundMarketName()
	case fnetdocument.FieldHighPriority:
		return m.HighPriority()
	case fnetdocument.FieldReferenceDate:
		return m.ReferenceDate()
	case fnetdocument.FieldReferenceDateFormat:
		return m.ReferenceDateFormat()
	case fnetdocument.FieldReferenceDateStr:
		return m.ReferenceDateStr()
	case fnetdocument.FieldReviewed:
		return m.Reviewed()
	case fnetdocument.FieldStatus:
		return m.Status()
	case fnetdocument.FieldSubCategory1Str:
		return m.SubCategory1Str()
	case fnetdocument.FieldSubCategory2Str:
		return m.SubCategory2Str()
	case fnetdocument.FieldSubmissionDate:
		return m.SubmissionDate()
	case fnetdocument.FieldSubmissionDateStr:
		return m.SubmissionDateStr()
	case fnetdocument.FieldSubmissionMethod:
		return m.SubmissionMethod()
	case fnetdocument.FieldSubmissionMethodDescription:
		return m.SubmissionMethodDescription()
	case fnetdocument.FieldSubmissionStatus:
		return m.SubmissionStatus()
	case fnetdocument.FieldSubmissionStatusDescription:
		return m.SubmissionStatusDescription()
	case fnetdocument.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FnetDocumentMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fnetdocument.FieldFnetID:
		return m.OldFnetID(ctx)
	case fnetdocument.FieldAdditionalInformation:
		return m.OldAdditionalInformation(ctx)
	case fnetdocument.FieldCategoryStr:
		return m.OldCategoryStr(ctx)
	case fnetdocument.FieldFundDescription:
		return m.OldFundDescription(ctx)
	case fnetdocument.FieldFundMarketName:
		return m.OldFundMarketName(ctx)
	case fnetdocument.FieldHighPriority:
		return m.OldHighPriority(ctx)
	case fnetdocument.FieldReferenceDate:
		return m.OldReferenceDate(ctx)
	case fnetdocument.FieldReferenceDateFormat:
		return m.OldReferenceDateFormat(ctx)
	case fnetdocument.FieldReferenceDateStr:
		return m.OldReferenceDateStr(ctx)
	case fnetdocument.FieldReviewed:
		return m.OldReviewed(ctx)
	case fnetdocument.FieldStatus:
		return m.OldStatus(ctx)
	case fnetdocument.FieldSubCategory1Str:
		return m.OldSubCategory1Str(ctx)
	case fnetdocument.FieldSubCategory2Str:
		return m.OldSubCategory2Str(ctx)
	case fnetdocument.FieldSubmissionDate:
		return m.OldSubmissionDate(ctx)
	case fnetdocument.FieldSubmissionDateStr:
		return m.OldSubmissionDateStr(ctx)
	case fnetdocument.FieldSubmissionMethod:
		return m.OldSubmissionMethod(ctx)
	case fnetdocument.FieldSubmissionMethodDescription:
		return m.OldSubmissionMethodDescription(ctx)
	case fnetdocument.FieldSubmissionStatus:
		return m.OldSubmissionStatus(ctx)
	case fnetdocument.FieldSubmissionStatusDescription:
		return m.OldSubmissionStatusDescription(ctx)
	case fnetdocument.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("unknown FnetDocument field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetDocumentMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fnetdocument.FieldFnetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFnetID(v)
		return nil
	case fnetdocument.FieldAdditionalInformation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAdditionalInformation(v)
		return nil
	case fnetdocument.FieldCategoryStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategoryStr(v)
		return nil
	case fnetdocument.FieldFundDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFundDescription(v)
		return nil
	case fnetdocument.FieldFundMarketName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFundMarketName(v)
		return nil
	case fnetdocument.FieldHighPriority:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHighPriority(v)
		return nil
	case fnetdocument.FieldReferenceDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceDate(v)
		return nil
	case fnetdocument.FieldReferenceDateFormat:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceDateFormat(v)
		return nil
	case fnetdocument.FieldReferenceDateStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReferenceDateStr(v)
		return nil
	case fnetdocument.FieldReviewed:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetReviewed(v)
		return nil
	case fnetdocument.FieldStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case fnetdocument.FieldSubCategory1Str:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubCategory1Str(v)
		return nil
	case fnetdocument.FieldSubCategory2Str:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubCategory2Str(v)
		return nil
	case fnetdocument.FieldSubmissionDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionDate(v)
		return nil
	case fnetdocument.FieldSubmissionDateStr:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionDateStr(v)
		return nil
	case fnetdocument.FieldSubmissionMethod:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionMethod(v)
		return nil
	case fnetdocument.FieldSubmissionMethodDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionMethodDescription(v)
		return nil
	case fnetdocument.FieldSubmissionStatus:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionStatus(v)
		return nil
	case fnetdocument.FieldSubmissionStatusDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubmissionStatusDescription(v)
		return nil
	case fnetdocument.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("unknown FnetDocument field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FnetDocumentMutation) AddedFields() []string {
	var fields []string
	if m.addfnet_id != nil {
		fields = append(fields, fnetdocument.FieldFnetID)
	}
	if m.addversion != nil {
		fields = append(fields, fnetdocument.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FnetDocumentMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case fnetdocument.FieldFnetID:
		return m.AddedFnetID()
	case fnetdocument.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetDocumentMutation) AddField(name string, value ent.Value) error {
	switch name {
	case fnetdocument.FieldFnetID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddFnetID(v)
		return nil
	case fnetdocument.FieldVersion:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("unknown FnetDocument numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FnetDocumentMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(fnetdocument.FieldAdditionalInformation) {
		fields = append(fields, fnetdocument.FieldAdditionalInformation)
	}
	if m.FieldCleared(fnetdocument.FieldFundMarketName) {
		fields = append(fields, fnetdocument.FieldFundMarketName)
	}
	if m.FieldCleared(fnetdocument.FieldSubCategory1Str) {
		fields = append(fields, fnetdocument.FieldSubCategory1Str)
	}
	if m.FieldCleared(fnetdocument.FieldSubCategory2Str) {
		fields = append(fields, fnetdocument.FieldSubCategory2Str)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FnetDocumentMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FnetDocumentMutation) ClearField(name string) error {
	switch name {
	case fnetdocument.FieldAdditionalInformation:
		m.ClearAdditionalInformation()
		return nil
	case fnetdocument.FieldFundMarketName:
		m.ClearFundMarketName()
		return nil
	case fnetdocument.FieldSubCategory1Str:
		m.ClearSubCategory1Str()
		return nil
	case fnetdocument.FieldSubCategory2Str:
		m.ClearSubCategory2Str()
		return nil
	}
	return fmt.Errorf("unknown FnetDocument nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FnetDocumentMutation) ResetField(name string) error {
	switch name {
	case fnetdocument.FieldFnetID:
		m.ResetFnetID()
		return nil
	case fnetdocument.FieldAdditionalInformation:
		m.ResetAdditionalInformation()
		return nil
	case fnetdocument.FieldCategoryStr:
		m.ResetCategoryStr()
		return nil
	case fnetdocument.FieldFundDescription:
		m.ResetFundDescription()
		return nil
	case fnetdocument.FieldFundMarketName:
		m.ResetFundMarketName()
		return nil
	case fnetdocument.FieldHighPriority:
		m.ResetHighPriority()
		return nil
	case fnetdocument.FieldReferenceDate:
		m.ResetReferenceDate()
		return nil
	case fnetdocument.FieldReferenceDateFormat:
		m.ResetReferenceDateFormat()
		return nil
	case fnetdocument.FieldReferenceDateStr:
		m.ResetReferenceDateStr()
		return nil
	case fnetdocument.FieldReviewed:
		m.ResetReviewed()
		return nil
	case fnetdocument.FieldStatus:
		m.ResetStatus()
		return nil
	case fnetdocument.FieldSubCategory1Str:
		m.ResetSubCategory1Str()
		return nil
	case fnetdocument.FieldSubCategory2Str:
		m.ResetSubCategory2Str()
		return nil
	case fnetdocument.FieldSubmissionDate:
		m.ResetSubmissionDate()
		return nil
	case fnetdocument.FieldSubmissionDateStr:
		m.ResetSubmissionDateStr()
		return nil
	case fnetdocument.FieldSubmissionMethod:
		m.ResetSubmissionMethod()
		return nil
	case fnetdocument.FieldSubmissionMethodDescription:
		m.ResetSubmissionMethodDescription()
		return nil
	case fnetdocument.FieldSubmissionStatus:
		m.ResetSubmissionStatus()
		return nil
	case fnetdocument.FieldSubmissionStatusDescription:
		m.ResetSubmissionStatusDescription()
		return nil
	case fnetdocument.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("unknown FnetDocument field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FnetDocumentMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.category != nil {
		edges = append(edges, fnetdocument.EdgeCategory)
	}
	if m.sub_category1 != nil {
		edges = append(edges, fnetdocument.EdgeSubCategory1)
	}
	if m.sub_category2 != nil {
		edges = append(edges, fnetdocument.EdgeSubCategory2)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FnetDocumentMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fnetdocument.EdgeCategory:
		if id := m.category; id != nil {
			return []ent.Value{*id}
		}
	case fnetdocument.EdgeSubCategory1:
		if id := m.sub_category1; id != nil {
			return []ent.Value{*id}
		}
	case fnetdocument.EdgeSubCategory2:
		if id := m.sub_category2; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FnetDocumentMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FnetDocumentMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FnetDocumentMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedcategory {
		edges = append(edges, fnetdocument.EdgeCategory)
	}
	if m.clearedsub_category1 {
		edges = append(edges, fnetdocument.EdgeSubCategory1)
	}
	if m.clearedsub_category2 {
		edges = append(edges, fnetdocument.EdgeSubCategory2)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FnetDocumentMutation) EdgeCleared(name string) bool {
	switch name {
	case fnetdocument.EdgeCategory:
		return m.clearedcategory
	case fnetdocument.EdgeSubCategory1:
		return m.clearedsub_category1
	case fnetdocument.EdgeSubCategory2:
		return m.clearedsub_category2
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FnetDocumentMutation) ClearEdge(name string) error {
	switch name {
	case fnetdocument.EdgeCategory:
		m.ClearCategory()
		return nil
	case fnetdocument.EdgeSubCategory1:
		m.ClearSubCategory1()
		return nil
	case fnetdocument.EdgeSubCategory2:
		m.ClearSubCategory2()
		return nil
	}
	return fmt.Errorf("unknown FnetDocument unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FnetDocumentMutation) ResetEdge(name string) error {
	switch name {
	case fnetdocument.EdgeCategory:
		m.ResetCategory()
		return nil
	case fnetdocument.EdgeSubCategory1:
		m.ResetSubCategory1()
		return nil
	case fnetdocument.EdgeSubCategory2:
		m.ResetSubCategory2()
		return nil
	}
	return fmt.Errorf("unknown FnetDocument edge %s", name)
}

// FnetSubCategory1Mutation represents an operation that mutates the FnetSubCategory1 nodes in the graph.
type FnetSubCategory1Mutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	documents        map[int]struct{}
	removeddocuments map[int]struct{}
	cleareddocuments bool
	done             bool
	oldValue         func(context.Context) (*FnetSubCategory1, error)
	predicates       []predicate.FnetSubCategory1
}

var _ ent.Mutation = (*FnetSubCategory1Mutation)(nil)

// fnetsubcategory1Option allows management of the mutation configuration using functional options.
type fnetsubcategory1Option func(*FnetSubCategory1Mutation)

// newFnetSubCategory1Mutation creates new mutation for the FnetSubCategory1 entity.
func newFnetSubCategory1Mutation(c config, op Op, opts ...fnetsubcategory1Option) *FnetSubCategory1Mutation {
	m := &FnetSubCategory1Mutation{
		config:        c,
		op:            op,
		typ:           TypeFnetSubCategory1,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFnetSubCategory1ID sets the ID field of the mutation.
func withFnetSubCategory1ID(id int) fnetsubcategory1Option {
	return func(m *FnetSubCategory1Mutation) {
		var (
			err   error
			once  sync.Once
			value *FnetSubCategory1
		)
		m.oldValue = func(ctx context.Context) (*FnetSubCategory1, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FnetSubCategory1.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFnetSubCategory1 sets the old FnetSubCategory1 of the mutation.
func withFnetSubCategory1(node *FnetSubCategory1) fnetsubcategory1Option {
	return func(m *FnetSubCategory1Mutation) {
		m.oldValue = func(context.Context) (*FnetSubCategory1, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FnetSubCategory1Mutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FnetSubCategory1Mutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FnetSubCategory1Mutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FnetSubCategory1Mutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FnetSubCategory1.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FnetSubCategory1Mutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FnetSubCategory1Mutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FnetSubCategory1 entity.
// If the FnetSubCategory1 object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetSubCategory1Mutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FnetSubCategory1Mutation) ResetName() {
	m.name = nil
}

// AddDocumentIDs adds the "documents" edge to the FnetDocument entity by ids.
func (m *FnetSubCategory1Mutation) AddDocumentIDs(ids ...int) {
	if m.documents == nil {
		m.documents = make(map[int]struct{})
	}
	for i := range ids {
		m.documents[ids[i]] = struct{}{}
	}
}

// ClearDocuments clears the "documents" edge to the FnetDocument entity.
func (m *FnetSubCategory1Mutation) ClearDocuments() {
	m.cleareddocuments = true
}

// DocumentsCleared reports if the "documents" edge to the FnetDocument entity was cleared.
func (m *FnetSubCategory1Mutation) DocumentsCleared() bool {
	return m.cleareddocuments
}

// RemoveDocumentIDs removes the "documents" edge to the FnetDocument entity by IDs.
func (m *FnetSubCategory1Mutation) RemoveDocumentIDs(ids ...int) {
	if m.removeddocuments == nil {
		m.removeddocuments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.documents, ids[i])
		m.removeddocuments[ids[i]] = struct{}{}
	}
}

// RemovedDocuments returns the removed IDs of the "documents" edge to the FnetDocument entity.
func (m *FnetSubCategory1Mutation) RemovedDocumentsIDs() (ids []int) {
	for id := range m.removeddocuments {
		ids = append(ids, id)
	}
	return
}

// DocumentsIDs returns the "documents" edge IDs in the mutation.
func (m *FnetSubCategory1Mutation) DocumentsIDs() (ids []int) {
	for id := range m.documents {
		ids = append(ids, id)
	}
	return
}

// ResetDocuments resets all changes to the "documents" edge.
func (m *FnetSubCategory1Mutation) ResetDocuments() {
	m.documents = nil
	m.cleareddocuments = false
	m.removeddocuments = nil
}

// Where appends a list predicates to the FnetSubCategory1Mutation builder.
func (m *FnetSubCategory1Mutation) Where(ps ...predicate.FnetSubCategory1) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FnetSubCategory1Mutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FnetSubCategory1Mutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FnetSubCategory1, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FnetSubCategory1Mutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FnetSubCategory1Mutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FnetSubCategory1).
func (m *FnetSubCategory1Mutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FnetSubCategory1Mutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, fnetsubcategory1.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FnetSubCategory1Mutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fnetsubcategory1.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FnetSubCategory1Mutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fnetsubcategory1.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown FnetSubCategory1 field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetSubCategory1Mutation) SetField(name string, value ent.Value) error {
	switch name {
	case fnetsubcategory1.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown FnetSubCategory1 field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FnetSubCategory1Mutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FnetSubCategory1Mutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetSubCategory1Mutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FnetSubCategory1 numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FnetSubCategory1Mutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FnetSubCategory1Mutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FnetSubCategory1Mutation) ClearField(name string) error {
	return fmt.Errorf("unknown FnetSubCategory1 nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FnetSubCategory1Mutation) ResetField(name string) error {
	switch name {
	case fnetsubcategory1.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown FnetSubCategory1 field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FnetSubCategory1Mutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.documents != nil {
		edges = append(edges, fnetsubcategory1.EdgeDocuments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FnetSubCategory1Mutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fnetsubcategory1.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.documents))
		for id := range m.documents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FnetSubCategory1Mutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddocuments != nil {
		edges = append(edges, fnetsubcategory1.EdgeDocuments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FnetSubCategory1Mutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case fnetsubcategory1.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.removeddocuments))
		for id := range m.removeddocuments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FnetSubCategory1Mutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddocuments {
		edges = append(edges, fnetsubcategory1.EdgeDocuments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FnetSubCategory1Mutation) EdgeCleared(name string) bool {
	switch name {
	case fnetsubcategory1.EdgeDocuments:
		return m.cleareddocuments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FnetSubCategory1Mutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FnetSubCategory1 unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FnetSubCategory1Mutation) ResetEdge(name string) error {
	switch name {
	case fnetsubcategory1.EdgeDocuments:
		m.ResetDocuments()
		return nil
	}
	return fmt.Errorf("unknown FnetSubCategory1 edge %s", name)
}

// FnetSubCategory2Mutation represents an operation that mutates the FnetSubCategory2 nodes in the graph.
type FnetSubCategory2Mutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	clearedFields    map[string]struct{}
	documents        map[int]struct{}
	removeddocuments map[int]struct{}
	cleareddocuments bool
	done             bool
	oldValue         func(context.Context) (*FnetSubCategory2, error)
	predicates       []predicate.FnetSubCategory2
}

var _ ent.Mutation = (*FnetSubCategory2Mutation)(nil)

// fnetsubcategory2Option allows management of the mutation configuration using functional options.
type fnetsubcategory2Option func(*FnetSubCategory2Mutation)

// newFnetSubCategory2Mutation creates new mutation for the FnetSubCategory2 entity.
func newFnetSubCategory2Mutation(c config, op Op, opts ...fnetsubcategory2Option) *FnetSubCategory2Mutation {
	m := &FnetSubCategory2Mutation{
		config:        c,
		op:            op,
		typ:           TypeFnetSubCategory2,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFnetSubCategory2ID sets the ID field of the mutation.
func withFnetSubCategory2ID(id int) fnetsubcategory2Option {
	return func(m *FnetSubCategory2Mutation) {
		var (
			err   error
			once  sync.Once
			value *FnetSubCategory2
		)
		m.oldValue = func(ctx context.Context) (*FnetSubCategory2, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().FnetSubCategory2.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFnetSubCategory2 sets the old FnetSubCategory2 of the mutation.
func withFnetSubCategory2(node *FnetSubCategory2) fnetsubcategory2Option {
	return func(m *FnetSubCategory2Mutation) {
		m.oldValue = func(context.Context) (*FnetSubCategory2, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FnetSubCategory2Mutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FnetSubCategory2Mutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FnetSubCategory2Mutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FnetSubCategory2Mutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().FnetSubCategory2.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *FnetSubCategory2Mutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *FnetSubCategory2Mutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the FnetSubCategory2 entity.
// If the FnetSubCategory2 object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FnetSubCategory2Mutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *FnetSubCategory2Mutation) ResetName() {
	m.name = nil
}

// AddDocumentIDs adds the "documents" edge to the FnetDocument entity by ids.
func (m *FnetSubCategory2Mutation) AddDocumentIDs(ids ...int) {
	if m.documents == nil {
		m.documents = make(map[int]struct{})
	}
	for i := range ids {
		m.documents[ids[i]] = struct{}{}
	}
}

// ClearDocuments clears the "documents" edge to the FnetDocument entity.
func (m *FnetSubCategory2Mutation) ClearDocuments() {
	m.cleareddocuments = true
}

// DocumentsCleared reports if the "documents" edge to the FnetDocument entity was cleared.
func (m *FnetSubCategory2Mutation) DocumentsCleared() bool {
	return m.cleareddocuments
}

// RemoveDocumentIDs removes the "documents" edge to the FnetDocument entity by IDs.
func (m *FnetSubCategory2Mutation) RemoveDocumentIDs(ids ...int) {
	if m.removeddocuments == nil {
		m.removeddocuments = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.documents, ids[i])
		m.removeddocuments[ids[i]] = struct{}{}
	}
}

// RemovedDocuments returns the removed IDs of the "documents" edge to the FnetDocument entity.
func (m *FnetSubCategory2Mutation) RemovedDocumentsIDs() (ids []int) {
	for id := range m.removeddocuments {
		ids = append(ids, id)
	}
	return
}

// DocumentsIDs returns the "documents" edge IDs in the mutation.
func (m *FnetSubCategory2Mutation) DocumentsIDs() (ids []int) {
	for id := range m.documents {
		ids = append(ids, id)
	}
	return
}

// ResetDocuments resets all changes to the "documents" edge.
func (m *FnetSubCategory2Mutation) ResetDocuments() {
	m.documents = nil
	m.cleareddocuments = false
	m.removeddocuments = nil
}

// Where appends a list predicates to the FnetSubCategory2Mutation builder.
func (m *FnetSubCategory2Mutation) Where(ps ...predicate.FnetSubCategory2) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FnetSubCategory2Mutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FnetSubCategory2Mutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.FnetSubCategory2, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FnetSubCategory2Mutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FnetSubCategory2Mutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (FnetSubCategory2).
func (m *FnetSubCategory2Mutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FnetSubCategory2Mutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.name != nil {
		fields = append(fields, fnetsubcategory2.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FnetSubCategory2Mutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fnetsubcategory2.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FnetSubCategory2Mutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fnetsubcategory2.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown FnetSubCategory2 field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetSubCategory2Mutation) SetField(name string, value ent.Value) error {
	switch name {
	case fnetsubcategory2.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown FnetSubCategory2 field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FnetSubCategory2Mutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FnetSubCategory2Mutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FnetSubCategory2Mutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown FnetSubCategory2 numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FnetSubCategory2Mutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FnetSubCategory2Mutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FnetSubCategory2Mutation) ClearField(name string) error {
	return fmt.Errorf("unknown FnetSubCategory2 nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FnetSubCategory2Mutation) ResetField(name string) error {
	switch name {
	case fnetsubcategory2.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown FnetSubCategory2 field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FnetSubCategory2Mutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.documents != nil {
		edges = append(edges, fnetsubcategory2.EdgeDocuments)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FnetSubCategory2Mutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fnetsubcategory2.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.documents))
		for id := range m.documents {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FnetSubCategory2Mutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddocuments != nil {
		edges = append(edges, fnetsubcategory2.EdgeDocuments)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FnetSubCategory2Mutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case fnetsubcategory2.EdgeDocuments:
		ids := make([]ent.Value, 0, len(m.removeddocuments))
		for id := range m.removeddocuments {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FnetSubCategory2Mutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddocuments {
		edges = append(edges, fnetsubcategory2.EdgeDocuments)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FnetSubCategory2Mutation) EdgeCleared(name string) bool {
	switch name {
	case fnetsubcategory2.EdgeDocuments:
		return m.cleareddocuments
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FnetSubCategory2Mutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown FnetSubCategory2 unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FnetSubCategory2Mutation) ResetEdge(name string) error {
	switch name {
	case fnetsubcategory2.EdgeDocuments:
		m.ResetDocuments()
		return nil
	}
	return fmt.Errorf("unknown FnetSubCategory2 edge %s", name)
}
